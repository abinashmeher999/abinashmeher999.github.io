<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Mind Ramblings - SymEngine</title>
<link href="http://abinashmeher999.github.io/tag/SymEngine/index.xml" rel="self"/>
<link href="http://abinashmeher999.github.io/tag/SymEngine/index.html"/>
 <updated>2015-07-18T09:54:13+05:30</updated>
 <id>http://abinashmeher999.github.io/tag/SymEngine.html</id>
 <author>
 <name>Abinash Meher</name>
 </author>
 
 <entry>
   <title>Common Enumeration in C and C++</title>
   <link href="http://abinashmeher999.github.io/2015/07/17/common-enumeration-in-c-and-c++/"/>
   <updated>2015-07-17T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.io/2015/07/17/common-enumeration-in-c-and-c++</id>
   <content type="html">&lt;p&gt;Welcome back! Well, I did most of my pending PRs merged last week, but I won’t go as far to say I was at my full efficiency. I indeed got entangled in some work and it distracted a lot. Good news is &lt;code&gt;Symbol&lt;/code&gt; is now officially supported in SymEngine ruby bindings and can be played with from the latest master&lt;/p&gt;

&lt;p&gt;In this post, I would like to concentrate more on a hack that we used to use &lt;code&gt;enum&lt;/code&gt;s in both &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;C++&lt;/code&gt;,&lt;!--more--&gt; that too within namespaces(within C you say? kinda.), so that they don’t possibly conflict with anything. We automated the whole thing .We instantly saw the benefit. We used the same approach for writing the same repetitive method for all classes and we came to know that we had somehow missed a method from a class.&lt;/p&gt;

&lt;h1 id=&quot;the-file-that-has-the-list&quot;&gt;The File that has the list&lt;/h1&gt;
&lt;p&gt;There has to be a file enlisting all the classes,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//File: type_codes.inc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYMENGINE_ENUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYMENGINE_ENUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTEGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYMENGINE_ENUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RATIONAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//more 47 lines...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;in-the-c-implementation-file&quot;&gt;In the C implementation file&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//File: cwrapper.h&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#define SYMENGINE_ENUM(type) SYMENGINE_##type&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#include &amp;quot;symengine/type_codes.inc&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#undef SYMENGINE_ENUM&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SYMENGINE_TypeID_Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;in-the-c-implementation-file-1&quot;&gt;In the C++ implementation file&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//File: basic.h&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#define SYMENGINE_ENUM(type) type&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#include &amp;quot;symengine/type_codes.inc&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#undef SYMENGINE_ENUM&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The &amp;#39;TypeID_Count&amp;#39; returns the number of elements in &amp;#39;TypeID&amp;#39;. For this&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// to work, do not assign numbers to the elements above (or if you do, you&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// must assign the correct count below).&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TypeID_Count&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is really an elegant solution. This can also be extended to all the other situations where you want to define or do the same thing for all the classes. You just need to enlist them at a certain place and use macros to generate/automate the process of writing the methods. You add a class and those methods get define for the class.&lt;/p&gt;

&lt;p&gt;I would highly suggest you to have a look at &lt;a href=&quot;https://github.com/sympy/symengine/issues/520&quot;&gt;Issue#520&lt;/a&gt; and &lt;a href=&quot;https://github.com/sympy/symengine/pull/540&quot;&gt;PR#540&lt;/a&gt; to have a look at how we extended this approach to automate the long and WET code in &lt;code&gt;Visitor&lt;/code&gt; and &lt;code&gt;BaseVisitor&lt;/code&gt; classes.&lt;/p&gt;

&lt;h2 id=&quot;next-week&quot;&gt;Next Week&lt;/h2&gt;
&lt;p&gt;I will try my best to get &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; to get merged during the weekend and during the week I can focus on the &lt;code&gt;Complex&lt;/code&gt; class. Also, next week I will focus on unwrapping the data from &lt;code&gt;gmp&lt;/code&gt; gem. We use it with SymEngine then why not with its Ruby bindings.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Refactored ruby/ext src files to use basic_new_heap&lt;/li&gt;
  &lt;li&gt;eq() and neq() use the new func sign after PR#508&lt;/li&gt;
  &lt;li&gt;Overrid &lt;code&gt;#eql?&lt;/code&gt;, &lt;code&gt;#hash&lt;/code&gt; in Basic to compare sets&lt;/li&gt;
  &lt;li&gt;Used basic_new_heap &amp;amp; Data_Wrap_Struct in alloc_func&lt;/li&gt;
  &lt;li&gt;Removed csymbol_alloc and alloc_func&lt;/li&gt;
  &lt;li&gt;Removed cbasic_init, uses default new now&lt;/li&gt;
  &lt;li&gt;Fixed typo in cwrapper&lt;/li&gt;
  &lt;li&gt;Added the C wrapper &amp;amp; its tests for Basic hash&lt;/li&gt;
  &lt;li&gt;Added the Ruby wrappers for hash&lt;/li&gt;
  &lt;li&gt;Changed implementation of basic_hash in cwrapper&lt;/li&gt;
  &lt;li&gt;Enum-Class mapping, selective exclude in type_codes.inc&lt;/li&gt;
  &lt;li&gt;Refactored for new SYMENGINE_ENUM macro signature&lt;/li&gt;
  &lt;li&gt;Used type_codes.inc to simplify code in visitor.h&lt;/li&gt;
  &lt;li&gt;Configured spec_helper to work with test_unit&lt;/li&gt;
  &lt;li&gt;Added test-unit as development dependency&lt;/li&gt;
  &lt;li&gt;Added script to test with valgrind&lt;/li&gt;
  &lt;li&gt;Added script to test with callgrind tool&lt;/li&gt;
  &lt;li&gt;Updated .gitignore&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Integer and Rational classes</title>
   <link href="http://abinashmeher999.github.io/2015/07/10/integer-and-rational-classes/"/>
   <updated>2015-07-10T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.io/2015/07/10/integer-and-rational-classes</id>
   <content type="html">&lt;p&gt;Hola! The refactoring of the C Interface has been done, and I did figure out how to test the Ruby bindings with the help of &lt;code&gt;Valgrind&lt;/code&gt; and without the &lt;code&gt;rake-tester&lt;/code&gt; gem.&lt;!--more--&gt; It needs a bunch a flags to tell the tool that it’s ok the way ruby accesses memory, and that the warnings can be &lt;em&gt;suppressed&lt;/em&gt;. Still, to be sure that the memory leaks that we see in the report/output are all good memory leaks we need to execute the tests in a loop. Which is pending. I have a &lt;code&gt;arit_spec.rb&lt;/code&gt; that reproduces the test cases from &lt;code&gt;test_arit.py&lt;/code&gt;, the python test file for testing the python wrappers.&lt;/p&gt;

&lt;p&gt;I am still debugging the errors in the wrappers for &lt;code&gt;get_args&lt;/code&gt; and &lt;code&gt;free_symbols&lt;/code&gt;. The test &lt;code&gt;arit_spec.rb&lt;/code&gt; depends on it. Only then I can maybe run them in a loop. I am still not yet sure how to run rspec tests in a loop. Shouldn’t be that complex. My closest guess is that, it might be because of a premature GC collection. We do have &lt;code&gt;RB_GC_GUARD&lt;/code&gt; for that in the Ruby C API. I came to this conclusion, since it wasn’t solved even after we implemented the functions to allocate &lt;code&gt;basic&lt;/code&gt; in a heap and rectified the possible errors in the C API code.&lt;/p&gt;

&lt;p&gt;I decided to come back to the error after I made some progress with the &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes. I think I made the wrong decision, I should have resolved that earlier error first. But good thing is, I have figured out the way I can use polymorphism(mixins, and overloading) and function overloading(decide inside a single function definition by switch) in them. I need the method &lt;code&gt;get_type_code&lt;/code&gt; for that so that in the function I can call the method to know the type of the VALUE that has been passed to the function inside the C API code(objects made with &lt;code&gt;Data_Wrap_Struct&lt;/code&gt; have the data type as &lt;code&gt;T_DATA&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;next-week&quot;&gt;Next Week&lt;/h2&gt;
&lt;p&gt;I will make the script that will run the tests in the loop to check for memory leaks. And get my other unmerged PRs merged, they have been there for a long time now. Then, implement the ways that I mentioned above in the &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes. These will also require modifying the existing tested code for arithmetic operations. This is why, I would get the other PRs get merged first. Things have turned a little bit dependent on each other.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Moved TypeIDs to a common header for both C &amp;amp; C++&lt;/li&gt;
  &lt;li&gt;Attempt to use TypeID in cwrapper files&lt;/li&gt;
  &lt;li&gt;[ci skip] rectified indentation in Ruby files&lt;/li&gt;
  &lt;li&gt;Removed old defs: free_symbols &amp;amp; get_args in Cwrp&lt;/li&gt;
  &lt;li&gt;Added setbasic_get in cwrappers&lt;/li&gt;
  &lt;li&gt;Added &lt;code&gt;#free_symbols&lt;/code&gt; to Basic class, tests fail&lt;/li&gt;
  &lt;li&gt;Added method &lt;code&gt;#args&lt;/code&gt; to Basic, tests don’t pass&lt;/li&gt;
  &lt;li&gt;args &amp;amp; free_symbols return basic allocated on heap&lt;/li&gt;
  &lt;li&gt;Fixed Typo in &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; headers&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Improving the C Interface</title>
   <link href="http://abinashmeher999.github.io/2015/07/03/improving-the-c-interface/"/>
   <updated>2015-07-03T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.io/2015/07/03/improving-the-c-interface</id>
   <content type="html">&lt;p&gt;Hello! I am halfway through my project. I can’t say that I achieved what I aimed to, but all the things that pushed this further weren’t delays, they needed to be done. The few things that were delays taught me a lot. They were worth the effort to lay a strong foundation. It has been an amazing learning experience, and makes me even more excited for what’s to come.&lt;/p&gt;

&lt;p&gt;Anyways, I will summarize what I did this week.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;improved-c-interface&quot;&gt;Improved C Interface&lt;/h2&gt;
&lt;p&gt;While the plan was to develop and add the feature for &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; and automating memory leak checks, it took a turn towards improving the current &lt;code&gt;C&lt;/code&gt; interface. While writing the c wrapper code for the function &lt;code&gt;SymEngine::free_symbols&lt;/code&gt;, the task was to transfer the information that was in C++ datatype to something in C so that is accessible in C. The return type of the C++ functions were a &lt;code&gt;std::vector&lt;/code&gt; in one case and &lt;code&gt;std::set&lt;/code&gt; in other. The obvious idea that came to my mind was to map them to an array of pointers that pointed to these data. This idea was also a result of us using &lt;code&gt;reinterpret_cast&lt;/code&gt; to change the pointer type to another while transfering from &lt;code&gt;C++&lt;/code&gt; to &lt;code&gt;C&lt;/code&gt; and back to &lt;code&gt;C++&lt;/code&gt;. This was obviously not a good approach as there were too many pointers and they created very hard to correct errors in the code.&lt;/p&gt;

&lt;p&gt;Ondrej came across this &lt;a href=&quot;http://yosefk.com/c++fqa/fqa.html#fqa-32.8&quot;&gt;link&lt;/a&gt;. And suggested we adopt this method, as it was a really elegant solution for this.&lt;/p&gt;

&lt;p&gt;The C interface now is lot more simplified. We declare the struct in the header file whereas the definition is done in the source file. The source file can indeed use &lt;code&gt;C++&lt;/code&gt;. The header file is like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//File: cwrapper.h&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ctypename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ctypename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;typename_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ctypename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the source file is like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//File: cwrapper.cpp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ctypename&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Cpptype&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typename_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ctypename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Elegant! Isn’t it?&lt;/p&gt;

&lt;p&gt;You can find the details of our implementation by my mentor, Ondrej Certik  &lt;a href=&quot;https://github.com/sympy/symengine/pull/495&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;iruby-notebook&quot;&gt;IRuby notebook&lt;/h3&gt;
&lt;p&gt;I have also prepared an IRuby notebook that will serve as a beginner notebook to get familiar with the gem. You can find it &lt;a href=&quot;https://github.com/sympy/symengine/pull/489&quot;&gt;here&lt;/a&gt;. It contains only what the gem supports right now. I will add more notebooks as I add more features.&lt;/p&gt;

&lt;h3 id=&quot;checking-for-memory-leaks&quot;&gt;Checking for memory leaks&lt;/h3&gt;
&lt;p&gt;As I had mentioned in my plan for the last week, I did search for ways to automate checking for memory leaks. I have come across many tools for checking for memory leaks in Ruby, but for testing the &lt;code&gt;C&lt;/code&gt; extensions, &lt;code&gt;Valgrind&lt;/code&gt; and &lt;code&gt;gdb&lt;/code&gt; are the ones that almost all of the blogs suggest. I have explained how I plan to proceed in the issue &lt;a href=&quot;https://github.com/sympy/symengine/issues/501&quot;&gt;Checking Ruby C Extensions for memory leaks. #501&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is really difficult to check for memory leaks even by ourselves, after seeing the output. I came to the conclusion that it will be very difficult to write a script that can check for memory leaks during the Continuous-Integration using Travis-CI, which was part of the initial plan. So, I have decided to automate checking of memory leaks by &lt;code&gt;Valgrind&lt;/code&gt; and &lt;code&gt;gdb&lt;/code&gt; from &lt;code&gt;rake&lt;/code&gt;, and this will only ease the plan of launching the debugging session. This way developer will have to launch the tasks and manually go through the report to debug it, before pushing the code to be assured that it is free of memory leaks.&lt;/p&gt;

&lt;h3 id=&quot;integration-of-other-ruby-gems&quot;&gt;Integration of other ruby gems&lt;/h3&gt;
&lt;p&gt;I also have plans to integrate the ruby bindings for &lt;code&gt;gmp&lt;/code&gt;, &lt;code&gt;mpfr&lt;/code&gt; and &lt;code&gt;mpc&lt;/code&gt; libraries, that are already available as gems, with ruby bindings for our library. I have created an issue &lt;a href=&quot;https://github.com/sympy/symengine/issues/490&quot;&gt;here&lt;/a&gt;. Feel free to drop any suggestions.&lt;/p&gt;

&lt;h2 id=&quot;next-week&quot;&gt;Next week&lt;/h2&gt;
&lt;p&gt;The plan for the next week includes complete refactoring of the Ruby C API according to the new improved interface, setting up of rake tasks to detect memory leaks and add support for &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Added a beginner IRuby notebook&lt;/li&gt;
  &lt;li&gt;Removed IRuby dependency from gemspec&lt;/li&gt;
  &lt;li&gt;Added the &lt;code&gt;#to_iruby&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;Added C wrapper for free_symbols&lt;/li&gt;
  &lt;li&gt;Added Ruby wrapper for &lt;code&gt;#free_symbols&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Added C wrapper for Basic::get_args&lt;/li&gt;
  &lt;li&gt;Refactored CRCPBasic in C wrappers and tests&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>The Symbol Class</title>
   <link href="http://abinashmeher999.github.io/2015/06/26/the-symbol-class/"/>
   <updated>2015-06-26T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.io/2015/06/26/the-symbol-class</id>
   <content type="html">&lt;p&gt;Hi everyone! The midterm evaluations for GSoC-2015 have arrived. These will last for about a week, in which we will be evaluated on the basis of our performance.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Beginning of this week, I got my PR merged. I had 49 randomly ordered commits that I managed to squeeze into only 13! I can say I have got a very good hold of &lt;code&gt;git rebase -i&lt;/code&gt; by now.&lt;/p&gt;

&lt;p&gt;This week was spent more towards developing the wrappers for &lt;code&gt;Symbol&lt;/code&gt; class, adding methods, writing tests and trying to find memory leaks. The obvious choice to detect memory leaks is Valgrind, but after using RSpec, I am looking for a more Rubyish way to detect memory leaks. I am still going through some guides on how to detect memory leaks, be it Valgrind or something else. Any suggestions will be really appreciated. You can review the work in my PR &lt;a href=&quot;https://github.com/sympy/symengine/pull/480&quot;&gt;#480 Support for Symbols in Ruby wrappers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the things I felt like worth writing in a blog post is as follows&lt;/p&gt;

&lt;h2 id=&quot;inheritance-in-ruby-c-api&quot;&gt;Inheritance in Ruby C API&lt;/h2&gt;

&lt;p&gt;We know how inheritance works in C++, if we have a class, say &lt;code&gt;SubC&lt;/code&gt;, that is the subclass of a particular class, say &lt;code&gt;C&lt;/code&gt;. When we make an object of the class &lt;code&gt;SubC&lt;/code&gt;, the constructor for the class &lt;code&gt;C&lt;/code&gt; is called first and then the constructor for &lt;code&gt;SubC&lt;/code&gt; along with the initialization that it might need to do. In Ruby, this happens in two steps. One is a method call to &lt;code&gt;.allocate&lt;/code&gt;, which is most of the time done internally, and then the method &lt;code&gt;.initialize&lt;/code&gt; to initialize the content of the object. So, when I was writing the wrappers for &lt;code&gt;Symbol&lt;/code&gt;, Isuru, one of my team-mates, raised this question. &lt;code&gt;Symbol&lt;/code&gt; is a subclass of &lt;code&gt;Basic&lt;/code&gt; and I have the code in&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Init_symengine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m_symengine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_define_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;SymEngine&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c_basic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_define_class_under&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_symengine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Basic&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_cObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rb_define_alloc_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_basic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbasic_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c_symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_define_class_under&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_symengine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Symbol&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_basic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rb_define_alloc_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csymbol_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now overloading the &lt;code&gt;allocate&lt;/code&gt; method through the C API to set the custom allocate function has been deprecated and it is advised to use the &lt;code&gt;rb_define_alloc_func&lt;/code&gt; now. In the method, &lt;code&gt;rb_define_class_under&lt;/code&gt;, the third argument is the name of the base class. So the doubt was, will the function &lt;code&gt;cbasic_alloc&lt;/code&gt; be called along with &lt;code&gt;csymbol_alloc&lt;/code&gt;, since &lt;code&gt;Basic&lt;/code&gt; is the base class for &lt;code&gt;Symbol&lt;/code&gt;? And also &lt;code&gt;csymbol_alloc&lt;/code&gt; did nothing but called the &lt;code&gt;cbasic_alloc&lt;/code&gt; function inside it. So, will the function be called twice.&lt;/p&gt;

&lt;p&gt;To get the answer, I tried searching on the internet and tried reading the source code, but couldn’t make much sense out of it. Neither anyone had made such classes and wrote about how they behave.&lt;/p&gt;

&lt;p&gt;So, I got the function &lt;code&gt;cbasic_alloc&lt;/code&gt; to print ‘basic object allocated’ everytime it got called.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbasic_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;basic_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data_Make_Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basic_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbasic_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;struct_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;basic object allocated&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now normally, expecting the same behaviour as C++ in C API, one would expect to see the message printed twice when a &lt;code&gt;Symbol&lt;/code&gt; object was created, but that’s not what I got.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;//&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rspec spec --format documentation
SymEngine
  SymEngine::Basic
    .new
      with no arguments
basic object allocated
        returns a Basic object

SymEngine
  SymEngine::Symbol
    .new
      with an integer as an argument
basic object allocated
        returns a Symbol object
    binary operations&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Only &lt;code&gt;csymbol_alloc&lt;/code&gt; was called when &lt;code&gt;Symbol&lt;/code&gt; was instantiated. Maybe the sole responsibility to create an object is given to the function passed. The parameter passed as the base class might only be for identification in Ruby that what is a subclass of whom.&lt;/p&gt;

&lt;p&gt;Soon, I will be adding support for &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes after which you will be able to form expressions using integers like &lt;code&gt;(x+y)**2&lt;/code&gt; instead of &lt;code&gt;(x+y)*(x+y)&lt;/code&gt;. You can follow the work in the PR &lt;a href=&quot;https://github.com/sympy/symengine/pull/487&quot;&gt;#487 Support for Integer and Rational classes in Ruby wrappers&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;next-week&quot;&gt;Next Week&lt;/h3&gt;
&lt;p&gt;The plan for next week is to completely support &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes along with automation of testing for memory leaks. I don’t even know, if it would be feasible to integrate testing of memory leaks to &lt;em&gt;Continuous-Integration&lt;/em&gt;, but it’s a worth a shot. It will be very convenient to have an alert system that warns you about memory leaks everytime you push the code.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Added source files for symbol&lt;/li&gt;
  &lt;li&gt;Added expand method to Basic&lt;/li&gt;
  &lt;li&gt;Added the to_s method that returns the string rep returns the string representation&lt;/li&gt;
  &lt;li&gt;Added the tests for symbol from basic&lt;/li&gt;
  &lt;li&gt;Moved the symbol related files to symengine/ruby&lt;/li&gt;
  &lt;li&gt;Rearranged the tests betn Symbol and Basic, Corrected the descriptions&lt;/li&gt;
  &lt;li&gt;Added the &lt;code&gt;==&lt;/code&gt; operator for Basic class Added test for &lt;code&gt;==&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Added method &lt;code&gt;!=&lt;/code&gt; in Basic&lt;/li&gt;
  &lt;li&gt;Added &lt;code&gt;alloc_func&lt;/code&gt; and removed repetitive headers&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Instantiating a Basic object</title>
   <link href="http://abinashmeher999.github.io/2015/06/25/Instantiating-a-Basic-object/"/>
   <updated>2015-06-25T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.io/2015/06/25/Instantiating-a-Basic-object</id>
   <content type="html">&lt;p&gt;Hi there! If you are following the blog, you would know how many errors I faced to setup and start writing the Ruby extensions. I don’t even remember half of the errors that I faced 2 weeks before. Well, that is why we have blog posts :P. We don’t want to miss a single takeaway from this experience.&lt;/p&gt;

&lt;p&gt;My PR in the symengine repo, &lt;a href=&quot;https://github.com/sympy/symengine/pull/414&quot;&gt;#414 Ruby file structure and Basic class&lt;/a&gt;, finally got merged!&lt;!--more--&gt; It was the most significant PR that I had got merged till now. 126 conversations! &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondrej&lt;/a&gt;, &lt;a href=&quot;https://github.com/isuruf&quot;&gt;Isuru&lt;/a&gt; and &lt;a href=&quot;https://github.com/dilcom&quot;&gt;Ivan&lt;/a&gt; were the ones who helped me to solve them. If it weren’t for them, it would have taken me 2 more weeks to figure it out for myself. I can’t thank them enough. I would like to keep this post concise, so if you are curious about the errors you would like my previous posts under the tag &lt;a href=&quot;http://abinashmeher999.github.io/tag/GSoC-2015/&quot;&gt;GSoC-2015&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setup-different-from-other-gems&quot;&gt;Setup different from other gems&lt;/h2&gt;
&lt;p&gt;The gem is different from other practices from other gems in a sense that our focus was to get rid of any dependencies that was not essential. Only the ones without which the extensions can’t be built. Like we got rid of &lt;code&gt;extconf.rb&lt;/code&gt; and hence the &lt;code&gt;mkmf&lt;/code&gt; module. The &lt;code&gt;Makefile&lt;/code&gt; is now generated by &lt;code&gt;cmake&lt;/code&gt;. Another one is &lt;code&gt;rake&lt;/code&gt; and the &lt;code&gt;Rakefile&lt;/code&gt;, tasks will be automated by the help of &lt;code&gt;python&lt;/code&gt; in the future. However, we still use &lt;code&gt;rdoc&lt;/code&gt; and &lt;code&gt;rspec&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;features-supported-now&quot;&gt;Features supported now&lt;/h2&gt;
&lt;p&gt;Currently, there is not much the extension supports. You can only instantiate a &lt;code&gt;Basic&lt;/code&gt; class. The gem has a module &lt;code&gt;SymEngine&lt;/code&gt;(It has a cool easter egg ;) too). The &lt;code&gt;Basic&lt;/code&gt; class is a part of the module. To make the object, do&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`symengine`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More features like making expressions out of symbols, by addition, subtraction, multiplication and division will be soon be introduced with the PR &lt;a href=&quot;https://github.com/sympy/symengine/pull/480&quot;&gt;#480 Support for Symbol in Ruby wrappers&lt;/a&gt;. After that, users can do things like&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;symengine&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;SymEngine::Symbol:0x00000002708328&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;SymEngine::Symbol:0x00000002700cb8&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;SymEngine::Symbol:0x000000026f78e8&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;SymEngine::Symbol:0x000000026eaa58&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;(x + y + z)**2&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;SymEngine::Symbol:0x000000026e2920&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2*x*y + 2*x*z + 2*y*z + x**2 + y**2 + z**2&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And not long after the PR is merged, I would have added the support for &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes.&lt;/p&gt;

&lt;p&gt;I would love to have your feedback. Please follow the instructions from &lt;a href=&quot;https://github.com/sympy/symengine/tree/master/symengine/ruby&quot;&gt;README&lt;/a&gt; to install the gem and give it a try. If you are interested to know about the future options that will be supported, you can go through my &lt;a href=&quot;https://github.com/abinashmeher999/sciruby/wiki/GSoC-2015-Abinash-Meher:-Ruby-bindings-for-CSymPy#timeline-tentative&quot;&gt;project proposal&lt;/a&gt; or browse through the current &lt;a href=&quot;https://github.com/sympy/symengine&quot;&gt;SymEngine&lt;/a&gt; codebase. The source code for the gem can be found &lt;a href=&quot;https://github.com/sympy/symengine/tree/master/symengine/ruby&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comments are always welcome :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Reconfiguring building and Travis Setup</title>
   <link href="http://abinashmeher999.github.io/2015/06/19/Reconfiguring-building-and-Travis-Setup/"/>
   <updated>2015-06-19T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.io/2015/06/19/Reconfiguring-building-and-Travis-Setup</id>
   <content type="html">&lt;p&gt;This week was one of the most engaging one for me up until now.  Not in a way that I could write thousands of lines of code, but more like I intensively collaborated with people online, to debug code. Many errors popped up,&lt;!--more--&gt; I discussed them with team-mates and we arrived at a solution(it was more like them telling me the solution :P). This whole week was spend trying to debug errors and get the wrappers to work and get integrated with Travis-CI. I will explain how we tackled them, one by one. I got done with so many things this week, that I am confused where to begin.&lt;/p&gt;

&lt;h2 id=&quot;problems-in-project-setup-and-building&quot;&gt;Problems in project setup and building&lt;/h2&gt;
&lt;p&gt;After solving the &lt;code&gt;LoadError&lt;/code&gt; for the extensions. One of the other errors that we faced was something like this, a symbol lookup error&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;symengine&amp;#39;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;002&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abinashmeher999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basic_init&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The library for the extensions &lt;code&gt;symengine.so&lt;/code&gt; wasn’t able to find the library at runtime. It was very much dependent if the library for symengine &lt;code&gt;libsymengine&lt;/code&gt; was compiled as a static or dynamic library. And in my case, I had the static version(libsymengine.a) and I had to make and install the dynamic version(libsymengine.so). This solved the issue, but again there was another error&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;symengine&amp;#39;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;LoadError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abinashmeher999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__cxa_pure_virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abinashmeher999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abinashmeher999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site_ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubygems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core_ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_require&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`require&amp;#39;&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;    from /home/abinashmeher999/.rvm/rubies/ruby-2.2.0/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    from /home/abinashmeher999/.rvm/gems/ruby-2.2.0/gems/symengine-0.0.0.pre/lib/symengine.rb:1:in `&amp;lt;top (required)&amp;gt;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abinashmeher999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site_ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubygems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core_ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_require&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`require&amp;#39;&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;    from /home/abinashmeher999/.rvm/rubies/ruby-2.2.0/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:128:in `&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    from /home/abinashmeher999/.rvm/rubies/ruby-2.2.0/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:39:in `require&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abinashmeher999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&amp;lt;main&amp;gt;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now this symbol is defined in the C++ standard library. I had to compile the C wrappers using a C++ compiler to link against it. I configured the &lt;code&gt;extconf.rb&lt;/code&gt; to use a C++ compiler.&lt;/p&gt;

&lt;p&gt;One of our aims during developing this was to get rid of unessential dependencies. The ones we already had the tools for. Like later the file &lt;code&gt;extconf.rb&lt;/code&gt;, that is used to generate Makefile for the extension was removed, because that could also be done by &lt;code&gt;cmake&lt;/code&gt;. Flags were added to &lt;code&gt;cmake&lt;/code&gt; for building the Ruby extensions, like the flag &lt;code&gt;-DWITH_RUBY=yes&lt;/code&gt;. The Makefile then generates the library &lt;code&gt;symengine.so&lt;/code&gt; in the directory &lt;code&gt;lib/symengine&lt;/code&gt;. The one that we were not able to load the previous week. Along with &lt;code&gt;extconf.rb&lt;/code&gt;, the file &lt;code&gt;extconf.h&lt;/code&gt; was also gone. Along these lines, the dependency on rake was also removed, and with that the &lt;code&gt;Rakefile&lt;/code&gt;. Any task automation will most probably be done in python. So, the &lt;code&gt;Rake::ExtensionTask&lt;/code&gt; was done by &lt;code&gt;cmake&lt;/code&gt; and the &lt;code&gt;Rake::GemPackageTask&lt;/code&gt; was replaced by the manual method of &lt;code&gt;gem build symengine.gemspec&lt;/code&gt; and &lt;code&gt;gem install symengine-0.0.0.gem&lt;/code&gt;.
&lt;a href=&quot;https://gist.github.com/289dfcf0834bfa14d32e.git&quot;&gt;mkmf.log&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;travis-setup&quot;&gt;Travis Setup&lt;/h2&gt;
&lt;p&gt;Not many projects have travis-ci setup for multiple languages. Not even the tutorials had clearly mentioned about setting up for multiple languages. But I did know about one of them, which is Shogun, the machine-learning toolbox. I referred to their &lt;code&gt;.travis.yml&lt;/code&gt; and setup something like this,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;clang&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;BUILD_TYPE=&amp;quot;Debug&amp;quot; WITH_BFD=&amp;quot;yes&amp;quot; WITH_SYMENGINE_ASSERT=&amp;quot;yes&amp;quot; WITH_PYTHON=&amp;quot;yes&amp;quot; PYTHON_VERSION=&amp;quot;2.7&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;clang&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ruby&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;WITH_RUBY=&amp;quot;yes&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1.9.3&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ruby&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;WITH_RUBY=&amp;quot;yes&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;2.0&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ruby&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;WITH_RUBY=&amp;quot;yes&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;2.1&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ruby&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;WITH_RUBY=&amp;quot;yes&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;2.2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We were doubtful if something like this would work. The earlier plan was to manually install the required version of ruby and then execute the shell commands to build the respective libraries. But this worked, build jobs with Ruby as the language were indeed created and I felt like I was beginning to understand how travis takes in the parameters and soon I will be doing some experiments with &lt;code&gt;.travis.yml&lt;/code&gt; :), out of this project.&lt;/p&gt;

&lt;h3 id=&quot;commits&quot;&gt;Commits:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Added TEST_IN_TREE=yes in env for builds with Ruby&lt;/li&gt;
  &lt;li&gt;Printing if symengine.so was made&lt;/li&gt;
  &lt;li&gt;Printing files in lib/symengine/ in travis log&lt;/li&gt;
  &lt;li&gt;Replaced ../lib with ../../lib in expand_path&lt;/li&gt;
  &lt;li&gt;Added lib to $LOAD_PATH &amp;amp; removed require_relative&lt;/li&gt;
  &lt;li&gt;Added the LOAD_PATH code in gemspec&lt;/li&gt;
  &lt;li&gt;Added lib/symengine to $LOAD_PATH&lt;/li&gt;
  &lt;li&gt;Added lib to $LOAD_PATH in spec_helper and removed gem install symengine&lt;/li&gt;
  &lt;li&gt;Added rest of the tests with pending statuses&lt;/li&gt;
  &lt;li&gt;[ci skip] untabified gemspec (converted tabs to spaces)&lt;/li&gt;
  &lt;li&gt;Installing the gem while testing Ideally this should not be done. This is just t&lt;/li&gt;
  &lt;li&gt;Changed the version from 0.0.0.pre to 0.0.0&lt;/li&gt;
  &lt;li&gt;Test push to debug travis failures&lt;/li&gt;
  &lt;li&gt;Added sudo: true to .travis.yml to support new container-based infrastructure in&lt;/li&gt;
  &lt;li&gt;Fixed errors in ruby_basic.c&lt;/li&gt;
  &lt;li&gt;Experimental fix with FindRuby.cmake&lt;/li&gt;
  &lt;li&gt;Kept duplicate LICENSE as temporary fix for installation errors&lt;/li&gt;
  &lt;li&gt;Added functions for binary, unary op&lt;/li&gt;
  &lt;li&gt;Changed symengine_BINARY_DIR to symengine_SOURCE_DIR&lt;/li&gt;
  &lt;li&gt;Added FindPackageHandleStandardArgs.cmake&lt;/li&gt;
  &lt;li&gt;Removed installation of new Bundler&lt;/li&gt;
  &lt;li&gt;Added new FindRuby.cmake&lt;/li&gt;
  &lt;li&gt;Moved dependencies from Gemfile to gemspec And rectified error in CMakelists.txt&lt;/li&gt;
  &lt;li&gt;Experimental fix for build errors removed the empty &lt;code&gt;if[[ &quot;${WITH_RUBY}&quot; != &quot;&quot; ]&lt;/code&gt;`&lt;/li&gt;
  &lt;li&gt;Attempt at travis integration for building and testing the extensions&lt;/li&gt;
  &lt;li&gt;Updated configuration for rspec&lt;/li&gt;
  &lt;li&gt;Rectified error in CMakeLists and updated README&lt;/li&gt;
  &lt;li&gt;Added test file that makes an object of Basic test passes&lt;/li&gt;
  &lt;li&gt;Used symengine license in gem and updated Manifest&lt;/li&gt;
  &lt;li&gt;Removed rake and rake-compiler from dependencies&lt;/li&gt;
  &lt;li&gt;Removed unnecessary files as discussed LICENSE, Rakefile and extconf.rb&lt;/li&gt;
  &lt;li&gt;Added display messages in CMakeLists.txt for Ruby&lt;/li&gt;
  &lt;li&gt;Updated the docs&lt;/li&gt;
  &lt;li&gt;Added src/ruby/pkg to gitignore&lt;/li&gt;
  &lt;li&gt;Removed bin folder&lt;/li&gt;
  &lt;li&gt;Fix typo&lt;/li&gt;
  &lt;li&gt;Build ruby wrappers with CMake&lt;/li&gt;
  &lt;li&gt;Tried to use &lt;code&gt;g++&lt;/code&gt; compiler&lt;/li&gt;
  &lt;li&gt;Updated compile instructions in README&lt;/li&gt;
  &lt;li&gt;Added the option to config dirs&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>The Load Error</title>
   <link href="http://abinashmeher999.github.io/2015/06/12/The-Load-Error/"/>
   <updated>2015-06-12T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.io/2015/06/12/The-Load-Error</id>
   <content type="html">&lt;p&gt;I hope you remember the &lt;code&gt;LoadError&lt;/code&gt; that I shared with you last week. The one which I was stuck for many days, and well frankly I couldn’t devote much time too, at the beginning of this week as there was the competition and the travel back home. It was only these one or two days at the end when I could search for the error.&lt;!--more--&gt;&lt;br /&gt;
For convenience, I am adding the gist again&lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/abinashmeher999/2544b4961f547bf286e7.js&quot;&gt; &lt;/script&gt;&lt;br /&gt;
I was very close to finding out the error. I was certain that the directory, or atleast the file was missing from the &lt;code&gt;$LOAD_PATH&lt;/code&gt;. Which becomes obvious, once you go through a few results after you have searched for the same error on the internet. But I had followed the tutorials from RubyGems.org on writing, file structure and naming of the extensions. So, there wasn’t any doubt that the extension might be building at a wrong location, that was not added to the &lt;code&gt;$LOAD_PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Even upon checking, the file &lt;code&gt;symengine.so&lt;/code&gt; was right there in &lt;code&gt;lib/symengine&lt;/code&gt; dir, after the extension was properly built. The only thing that I followed a little different from the tutorials was the &lt;code&gt;gemspec&lt;/code&gt; file. So, I narrowed it down to &lt;code&gt;gemspec&lt;/code&gt; file where the error might have been caused. Or some missing parameter that we need to set in order to include that to the &lt;code&gt;$LOAD_PATH&lt;/code&gt; upon installation of the gem.&lt;/p&gt;

&lt;p&gt;Then &lt;a href=&quot;https://github.com/isuruf&quot;&gt;Isuru&lt;/a&gt;, one of my fellow GSoC students from SymPy, came to the rescue and pointed out that I had failed to include the library file &lt;code&gt;symegine.so&lt;/code&gt; in the files list of the gem. What I was doing was&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;lib/**/*.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bin/*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;LICENSE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With &lt;code&gt;lib/**/*.rb&lt;/code&gt; I was clearly missing out the &lt;code&gt;lib/symegine/symegine.so&lt;/code&gt; file, which was the one &lt;code&gt;require &#39;symengine&#39;&lt;/code&gt; wasn’t able to load. Upon doing&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;lib/**/*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bin/*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;LICENSE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I could finally resolve the load error.&lt;/p&gt;

&lt;p&gt;Commits:&lt;br /&gt;
1. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/bcab97852b9b5350bb15eee6e3619291b7ff4aa0&quot;&gt;Load error fixed, added symengine.so to gem.files&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Week 3</title>
   <link href="http://abinashmeher999.github.io/2015/06/05/Week-3/"/>
   <updated>2015-06-05T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.io/2015/06/05/Week-3</id>
   <content type="html">&lt;p&gt;Sorry Guys. I don’t have much to say with this blog post. I am at a competition called &lt;em&gt;Intelligent Ground Vehicle Competition&lt;/em&gt; and didn’t get any time to work on the project. I wish I had time to solve the error.&lt;!--more--&gt; Unresolved errors really bother me. Even now, at the very time I am writing this post, my team-mates are struggling with a really sneaky bug. Arghhh!!&lt;/p&gt;

&lt;p&gt;Soon I will be back to resume my project. And try to figure out more about the error.&lt;br /&gt;
This is the error&lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/abinashmeher999/2544b4961f547bf286e7.js&quot;&gt; &lt;/script&gt;
I will appreciate it if you can share any hint about fixing this error. Looking forward to the next week!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building the wrappers</title>
   <link href="http://abinashmeher999.github.io/2015/05/29/Building-the-wrappers/"/>
   <updated>2015-05-29T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.io/2015/05/29/Building-the-wrappers</id>
   <content type="html">&lt;p&gt;This week was very engaging and a little hectic at the end for me. I had to rethink many things during the week, like these wrappers. I had to rewrite them, because of a logical error in the allocation of the pointers that pointed to the data. And spent a whole lot of time trying to understand a hack of passing a variable by reference in &lt;code&gt;c&lt;/code&gt; only to conclude that it can’t be used!&lt;!--more--&gt; Anyways, I learnt a new &lt;code&gt;c&lt;/code&gt; hack! You can refer to &lt;a href=&quot;http://stackoverflow.com/questions/30479106/possible-side-effects-of-doing-a-typedef-of-a-struct-to-an-array-of-one-element&quot;&gt;this question&lt;/a&gt; that I asked on stack overflow.&lt;/p&gt;

&lt;p&gt;So, the wrappers for Basic were written. But they didn’t compile because of a missing &lt;code&gt;-fPIC&lt;/code&gt; flag that evidently &lt;code&gt;cmake&lt;/code&gt; puts it on its own and &lt;code&gt;rake&lt;/code&gt; doesn’t. The flag, I guess, was required to enable building of shared libs. The error message was something like this&lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/abinashmeher999/3997cd256a91ff08edce.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;After hours and hours of googling and reading code on github, I figured out a way to add it. It needs to be added to the variable &lt;code&gt;$CFLAGS&lt;/code&gt; which is in &lt;code&gt;extconf.rb&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#File: extconf.rb&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$CFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; -Wall&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-Wall&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$CFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; -Werror&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-Werror&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$CFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; -fPIC&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-fpic&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And again there was another error&lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/abinashmeher999/a6964329f4b18948a61d.js&quot;&gt; &lt;/script&gt;
Which was basically because of the &lt;code&gt;static&lt;/code&gt; qualifier. Apparently it was local only to that file. Removing the static qualifier got rid of the errors. Thanks to &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondrej&lt;/a&gt;, who was there to help with any problem I faced during the whole week.&lt;/p&gt;

&lt;p&gt;And finally… the extension built.&lt;/p&gt;

&lt;p&gt;I built the gem and installed it. But I am not yet able to load the extension. There might be some issue with the library path. I will fix that and update it. That will be fixed hopefully in a day or two. And then I will build on the minimal test that I wrote.&lt;/p&gt;

&lt;p&gt;The next week I will be a little busy with the competition but I can at least fix the errors in loading the extension properly in &lt;code&gt;irb&lt;/code&gt; and add the remaning methods. The plan now for the next coding week is to add wrappers for the &lt;code&gt;Symbol&lt;/code&gt; class and &lt;code&gt;Integer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Commits:&lt;br /&gt;
1. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/9d9e9b5370aeaf2a3b2c933433ac5c8eddb8c849&quot;&gt;Rewrote Ruby C wrappers w/o typedefed array basic&lt;/a&gt;&lt;br /&gt;
2. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/fb73879ef488f7e536b03b2d526f90052a5652ca&quot;&gt;Added bare test file for &lt;code&gt;Basic&lt;/code&gt; class&lt;/a&gt;&lt;br /&gt;
3. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/4ccf13f496f8f8c0845d8791dcaf3194d762158d&quot;&gt;Fixed an error in &lt;code&gt;Gemfile&lt;/code&gt; and added &lt;code&gt;README&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
4. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/0f41bd84d139f885eb260957cccdc338f79929bf&quot;&gt;Added WITH_RUBY flags to CMakeLists.txt&lt;/a&gt;&lt;br /&gt;
5. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/2c1eb36f86291c30044f635f6c0c068cb4d0864f&quot;&gt;Added flag &lt;code&gt;-fPIC&lt;/code&gt;. Still doesn’t compile&lt;/a&gt;&lt;br /&gt;
6. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/fb6861ba3795c2c2d0d9a57954da107257e93b1a&quot;&gt;Changes to build the ruby extensions&lt;/a&gt;&lt;br /&gt;
7. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/d6eabe7e258e5260ea1e3b48853c57e851e13800&quot;&gt;Change in &lt;code&gt;require_path&lt;/code&gt; of gemspec&lt;/a&gt;&lt;br /&gt;
8. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/6792df9a9cbc3bfd82640fb2580fc8046888e2a1&quot;&gt;Removed the &lt;code&gt;static&lt;/code&gt; qualifier in wrappers&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing wrappers for Basic class</title>
   <link href="http://abinashmeher999.github.io/2015/05/22/Writing-wrappers-for-Basic-class/"/>
   <updated>2015-05-22T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.io/2015/05/22/Writing-wrappers-for-Basic-class</id>
   <content type="html">&lt;p&gt;So, it’s been already a week! The coding period (for me) has started. I am starting early to make up for my absence for a few days.&lt;/p&gt;

&lt;p&gt;I had already setup a minimal gem and automated building of extensions. I read the docs&lt;!--more--&gt; for c wrappers that have already been written in &lt;a href=&quot;https://github.com/sympy/symengine/blob/master/src/cwrapper.h&quot;&gt;&lt;code&gt;cwrapper.h&lt;/code&gt;&lt;/a&gt;. It mostly contains the c wrappers for &lt;code&gt;Basic&lt;/code&gt; class and a few of &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes. At one time I was confident that I could write all the wrappers for &lt;code&gt;Basic&lt;/code&gt; class at one go. How hard could it be? The thing I learnt is you can never be sure of anything, unless you implement it. I had to keep a copy of the documentation for writing extensions &lt;a href=&quot;https://github.com/ruby/ruby/blob/trunk/doc/extension.rdoc&quot;&gt;&lt;code&gt;README.EXT&lt;/code&gt;&lt;/a&gt; open at all times, double checking everything. Still, I got confused.&lt;/p&gt;

&lt;p&gt;Ondrej has advised me to make only a single function work first. That would be a better way, because once we figure out what to do. It’s pretty much the same for the others too. I hope it does. Then I can iteratively add other methods one by one.&lt;/p&gt;

&lt;p&gt;I pushed the commits to the PR &lt;a href=&quot;https://github.com/sympy/symengine/pull/414&quot;&gt;‘[WIP] Ruby wrappers initial file structure and Basic class #414’&lt;/a&gt;. The plan for the next week is to atleast finish this, write the tests in RSpec, and document them. Also if possible, start working on the other classes.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Google Summer of Code 2015</title>
   <link href="http://abinashmeher999.github.io/2015/05/06/Google-Summer-of-Code-2015/"/>
   <updated>2015-05-06T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.io/2015/05/06/Google-Summer-of-Code-2015</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/gsoc/gsoc-2015.png&quot; alt=&quot;GSoC-2015&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hi there! Yeah, you guessed it. I got selected into Google Summer of Code 2015! I am very excited for the summers. The results have been out and My project &lt;strong&gt;Ruby Bindings for SymEngine C++ symbolic manipulation library&lt;/strong&gt; has been selected.&lt;!--more--&gt; I was selected by The Ruby Science Foundation but luckily I get to work with both SciRuby and SymPy! Isn’t that exciting?&lt;/p&gt;

&lt;p&gt;My mentor is Mr. Ondřej Čertík himslef, who is the founder of SymPy and I am lucky to be mentored by him. I would like to thank him and the Ruby Science Foundation and all the folks there to give me such an opportunity. John Woods and Carlos Agarie helped me a lot during the application period. I would also like to thank Harsh Gupta and Shivam Vats for introducing me to the community.&lt;/p&gt;

&lt;h2 id=&quot;the-project&quot;&gt;The Project&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Ruby Bindings for SymEngine a symbolic manipulation library in C++&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
My project is to write the Ruby extensions for the C++ SymEngine library that provides functions for symbolic manipulation. This would also involve making the interface more rubyish than C++.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/abinashmeher999/sciruby/wiki/GSoC-2015-Abinash-Meher:-Ruby-bindings-for-CSymPy&quot;&gt;project&lt;/a&gt; will set up a strong foundation for any symbolic manipulation library or “SymRuby” for that matter, to be built for Ruby in the future. SymEngine is fast and is very apt to start the work with. I have also come across GlucSym, which is an unpublished Ruby-to-GiNaC bridge from 2008.&lt;/p&gt;

&lt;p&gt;But this interface(my project) might be the impulse the Ruby community needed to have a fully functional symbolic manipulation library. After all Ruby is a Very High Level Language! It will soon be needing such libraries. For me, I would be glad if someone uses the library for her/his project!&lt;/p&gt;
</content>
 </entry>
 
</feed>
