<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Mind Ramblings</title>
 <link href="http://abinashmeher999.github.iohttp://abinashmeher999.github.io/atom.xml" rel="self"/>
 <link href="http://abinashmeher999.github.iohttp://abinashmeher999.github.io/"/>
 <updated>2015-08-22T06:40:11+05:30</updated>
 <id>http://abinashmeher999.github.io</id>
 <author>
   <name>Abinash Meher</name>
   <email>abinashdakshana999@gmail.com</email>
 </author>

 
 <entry>
   <title>Documentation and Clean up</title>
   <link href="http://abinashmeher999.github.io/2015/08/21/documentation/"/>
   <updated>2015-08-21T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/08/21/documentation</id>
   <content type="html">&lt;p&gt;Hey folks! Today my GSoC period has officially ended. It was one of the best experiences I have had in my life. The level of exposure that you get with Google Summer of Code is unmatched. The things I learnt, will always be with me. The people I met will never cease to inspire me. This is the best thing a sophomore can do in his/her summers.&lt;!--more--&gt; I could go on and on about this, and it will never be enough. I would suggest you to have a shot at it. Even if you don’t get it, you get to learn a lot in the process.&lt;/p&gt;

&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;p&gt;I have prepared some nice Beginner Contributor Guides both for C Wrappers and Ruby Wrappers. If you were wondering where to look to begin contributingto SymEngine, these are the ones you need.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sympy/symengine/wiki/Beginner-Contributor-Guide---C-Wrappers&quot;&gt;Beginner Contributor Guide - C Wrappers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sympy/symengine/wiki/Beginner-Contributor-Guide---Ruby-Extensions&quot;&gt;Beginner Contributor Guide - Ruby Extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though I have pushed the symengine gem to &lt;a href=&quot;https://rubygems.org/&quot;&gt;RubyGems.org&lt;/a&gt;, the version available there still doesn’t work. I will have to add a few more scripts before it works.&lt;/p&gt;

&lt;p&gt;I have also sent PR to sciruby-notebooks to include the SymEngine notebooks.&lt;/p&gt;

&lt;p&gt;And I did send the post for SciRuby.com. I am glad John and Ondrej took time to read it again and again, and refined it. After a few days, my post will be up there at SciRuby.com! =D&lt;/p&gt;

&lt;h2 id=&quot;cleanup&quot;&gt;Cleanup&lt;/h2&gt;
&lt;p&gt;I fixed a TODO in the cwrapper tests and replaced all the heap allocated temporary instances of &lt;code&gt;basic_struct&lt;/code&gt; by stack allocated instances in the source files for Ruby wrappers.&lt;/p&gt;

&lt;h2 id=&quot;next-week&quot;&gt;Next Week&lt;/h2&gt;
&lt;p&gt;I will miss writing this part of the post :). I am indeed going to continue contributing to SymEngine! Not only the Ruby Wrappers but also the core SymEngine. I am eager to write a LaTeX printer (a function that outputs the string representation of objects in TeX format). Anyone interested can join me. Imagine the ruby wrappers giving a beautiful, well formatted output in the IRuby notebooks, the kind that you see in textbooks, made possible because of a function that you wrote!! If that doesn’t excite you, I don’t know what will.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Initial commit &amp;amp; class hierarchy, trig functions&lt;/li&gt;
  &lt;li&gt;[GSoC-2015] Post summarising work on symengine gem&lt;/li&gt;
  &lt;li&gt;Added more information about symengine&lt;/li&gt;
  &lt;li&gt;Added notebooks for symengine&lt;/li&gt;
  &lt;li&gt;Prepared the Beginner Contributor Guide - C Wrappers&lt;/li&gt;
  &lt;li&gt;Prepared the Beginner Contributor Guide - Ruby Wrappers&lt;/li&gt;
  &lt;li&gt;Uncommented basic_eq in the TODO&lt;/li&gt;
  &lt;li&gt;basic on stack wherever possible in ruby_basic.c&lt;/li&gt;
  &lt;li&gt;basic on stack wherever possible in ext/*.c&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Summary of GSoC-2015</title>
   <link href="http://abinashmeher999.github.io/2015/08/18/summary-of-gsoc-2015/"/>
   <updated>2015-08-18T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/08/18/summary-of-gsoc-2015</id>
   <content type="html">&lt;p&gt;A symbolic manipulation library is indispensable for scientists and students. Ruby is gaining huge popularity over the years, and a symbolic manipulation library gem  like this project in Ruby might prove to be the foundation for a computer algebra system in Ruby. With many efforts like these, Ruby might become the first choice for academicians given how easy it is to code your logic in Ruby.&lt;/p&gt;

&lt;p&gt;The motivation for &lt;a href=&quot;https://github.com/sympy/symengine&quot;&gt;SymEngine&lt;/a&gt; itself was to develop it once and then extend it to other languages rather than doing the same thing all over again for a language that it is required in.&lt;/p&gt;

&lt;p&gt;I have developed a &lt;a href=&quot;https://github.com/sympy/symengine/tree/master/symengine/ruby/notebooks&quot;&gt;few notebooks&lt;/a&gt; that demonstrate the use of the new SymEngine module in ruby. In the rest of the post, I would like to summarise what I did in the summer as part of &lt;a href=&quot;https://www.google-melange.com/gsoc/homepage/google/gsoc2015&quot;&gt;Google Summer of Code 2015&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;pre-midterm-evaluations&quot;&gt;Pre-midterm Evaluations&lt;/h2&gt;

&lt;p&gt;I am a newbie when it comes to ruby, and it took me a while to setup the gem and, configure files for the building of extensions. I followed the naming conventions for the project structure and the extensions, as best as I could.&lt;/p&gt;

&lt;h3 id=&quot;the-struggle-between-shared-static-and-dynamic-libraries&quot;&gt;The struggle between shared, static and dynamic libraries&lt;/h3&gt;
&lt;p&gt;I faced a lot of problem in the early stages, when I was trying to build the extensions. &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondrej&lt;/a&gt;, my mentor, and &lt;a href=&quot;https://github.com/isuruf&quot;&gt;Isuru&lt;/a&gt;, a fellow GSoC student, helped me a lot. There were many c flags that were being reported as missing. Some flags &lt;code&gt;cmake&lt;/code&gt; added by default but &lt;code&gt;extconf.rb&lt;/code&gt; didn’t, the same one that was required to be added to build it as a shared library. I am still confused about the details, more details are &lt;a href=&quot;http://abinashmeher999.github.io/2015/05/29/Building-the-wrappers/&quot;&gt;here&lt;/a&gt;. Finally, the library had to be built as a dynamic one. It was resolved later by hooking the process to &lt;code&gt;cmake&lt;/code&gt; rather than &lt;code&gt;mkmf&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;load-errors-and-problems-in-linking&quot;&gt;Load Errors and problems in linking&lt;/h3&gt;
&lt;p&gt;Many &lt;a href=&quot;http://abinashmeher999.github.io/2015/06/12/The-Load-Error/&quot;&gt;&lt;code&gt;LoadError&lt;/code&gt;s&lt;/a&gt; popped up, but were eventually solved. &lt;a href=&quot;https://github.com/dilcom/&quot;&gt;Ivan&lt;/a&gt; helped a lot in debugging the errors. In the end, it turned out to be a simple file missing in the gemspec, that was not being installed.&lt;/p&gt;

&lt;h3 id=&quot;reconfiguring-building&quot;&gt;Reconfiguring building&lt;/h3&gt;
&lt;p&gt;One of our aims during developing this was to get rid of unessential dependencies. The ones we already had the tools for. Like later the file &lt;code&gt;extconf.rb&lt;/code&gt;, that is used to generate Makefile for the extension was removed, because that could also be done by &lt;code&gt;cmake&lt;/code&gt;. Flags were added to &lt;code&gt;cmake&lt;/code&gt; for building the Ruby extensions, like the flag &lt;code&gt;-DWITH_RUBY=yes&lt;/code&gt;. The &lt;code&gt;Makefile&lt;/code&gt; then generates the library &lt;code&gt;symengine.so&lt;/code&gt; in the directory &lt;code&gt;lib/symengine&lt;/code&gt;.Along with &lt;code&gt;extconf.rb&lt;/code&gt;, the file &lt;code&gt;extconf.h&lt;/code&gt; was also gone. Along these lines, the dependency on &lt;code&gt;rake&lt;/code&gt; was also removed, and with that the &lt;code&gt;Rakefile&lt;/code&gt;. Any task automation will most probably be done in python. So, the &lt;code&gt;Rake::ExtensionTask&lt;/code&gt; was done by &lt;code&gt;cmake&lt;/code&gt; and the &lt;code&gt;Rake::GemPackageTask&lt;/code&gt; was replaced by the manual method of &lt;code&gt;gem build symengine.gemspec&lt;/code&gt; and &lt;code&gt;gem install symengine-0.0.0.gem&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;travis-setup&quot;&gt;Travis setup&lt;/h3&gt;
&lt;p&gt;Not many projects have travis-ci setup for multiple languages. Not even the tutorials had clearly mentioned about setting up for multiple languages. But I did know about one of them, which is Shogun, the machine-learning toolbox. I referred to their &lt;code&gt;.travis.yml&lt;/code&gt; and setup it up. If something like this wouldn’t have worked the plan was to manually install the required version of ruby and then execute the shell commands.&lt;/p&gt;

&lt;h3 id=&quot;making-a-basic-object&quot;&gt;Making a basic object&lt;/h3&gt;
&lt;p&gt;Finally, I was able to successfully build the extensions, link the extensions with the SymEngine library, load the ruby-extension library in the interpreter and successfully instantiate an object of type &lt;code&gt;Basic&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;inheritance-and-symbols&quot;&gt;Inheritance and Symbols&lt;/h3&gt;
&lt;p&gt;At this time, the way inheritance works(like the sequence of formation and destruction of objects of a class that had a superclass) with the Ruby C API, was confusing for all of us. I designed an &lt;a href=&quot;http://abinashmeher999.github.io/2015/06/26/the-symbol-class/#inheritance-in-ruby-c-api&quot;&gt;experiment&lt;/a&gt;
to check what was actually happening. That cleared things out, and made the it easier to wrap things from now on. I also wrapped the &lt;code&gt;Symbol&lt;/code&gt; class during the course.&lt;/p&gt;

&lt;h2 id=&quot;post-midterm-evaluations&quot;&gt;Post-midterm Evaluations&lt;/h2&gt;

&lt;h3 id=&quot;redesign-of-the-c-interface&quot;&gt;Redesign of the C interface&lt;/h3&gt;
&lt;p&gt;We had to design an ugly function to wrap vector in C. That led us to redesign the C interface. This approach had no reinterpret casting that was being done earlier. Each data structure had a type that was determined at compile time. For C, it was an opaque structure, while for C++ the opaque structure declared in the shared header file was implemented in the source file that had C++ data types. This &lt;a href=&quot;http://abinashmeher999.github.io/2015/07/03/improving-the-c-interface/&quot;&gt;blog post&lt;/a&gt; explains it further.&lt;/p&gt;

&lt;h3 id=&quot;integer-and-rational&quot;&gt;Integer and Rational&lt;/h3&gt;
&lt;p&gt;While trying to port the SymEngine classes, &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt;, I had to port many methods in &lt;code&gt;Basic&lt;/code&gt; before that. I also replicated the &lt;code&gt;rake&lt;/code&gt; tasks in NMatrix, for detection of memory leaks, in form of bash scripts.&lt;/p&gt;

&lt;h3 id=&quot;common-enumeration&quot;&gt;Common enumeration&lt;/h3&gt;
&lt;p&gt;Since all objects in the Ruby C API are of the type &lt;code&gt;CBasic&lt;/code&gt;, we needed a function that would give us the typename during the runtime for the corresponding objects to be wrapped in ruby, as an object of the correct &lt;code&gt;Class&lt;/code&gt; in ruby. Since, this was achieved with &lt;code&gt;enum&lt;/code&gt; in C++, the same thing could be done in C too, with all the classes written manually again. But there was no guarantee for this to be consistent, if ever the features required to be wrapped for a new language, and also manually adding the class in all the enum list everytime a new class is added was prone to errors. So, to make this DRY, we automated this by sharing the list of enums. More details for the implementation can be found &lt;a href=&quot;http://abinashmeher999.github.io/2015/07/17/common-enumeration-in-c-and-c++/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;class-coercion-and-interoperability&quot;&gt;Class coercion and interoperability&lt;/h3&gt;
&lt;p&gt;To support interoperability with the builtin ruby types, I had to overload the methods in builtin classes earlier(this was not continued). Overriding all the existing binary operations for a ruby class to support SymEngine types, violated the open/closed principle. There was indeed another way, which is &lt;em&gt;‘Class Coercion’&lt;/em&gt;. It was suggested by &lt;a href=&quot;https://github.com/isuruf/&quot;&gt;Isuru&lt;/a&gt;. After that, SymEngine types could seamlessly interoperate between the ruby types.&lt;/p&gt;

&lt;h3 id=&quot;arithmetic-operations&quot;&gt;Arithmetic operations&lt;/h3&gt;
&lt;p&gt;After this, all the arithmetic operations had been successfully ported. Each &lt;code&gt;Basic&lt;/code&gt; object can now perform arithmetic operations with other &lt;code&gt;Basic&lt;/code&gt; object(sometimes even ruby objects like &lt;code&gt;Integer&lt;/code&gt;). The test file in python, that had all the corresponding test cases was ported to its RSpec counterpart.&lt;/p&gt;

&lt;h3 id=&quot;substitutions&quot;&gt;Substitutions&lt;/h3&gt;
&lt;p&gt;Recently I completed porting the substitutions module to the extensions(&lt;code&gt;#subs&lt;/code&gt;). This feature has added a lot of convenience as now you can substitute a &lt;code&gt;SymEngine::Symbol&lt;/code&gt; with some other value in an expression and then &lt;code&gt;#expand&lt;/code&gt; to get the result.&lt;/p&gt;

&lt;h3 id=&quot;trigonometric-functions&quot;&gt;Trigonometric functions&lt;/h3&gt;
&lt;p&gt;Currently, I am working on porting the trigonometric functions in SymEngine to the extensions. This would first require to wrap the &lt;code&gt;Function&lt;/code&gt; class and then the &lt;code&gt;TrigFunction&lt;/code&gt; class in SymEngine.&lt;/p&gt;

&lt;h3 id=&quot;integration-of-other-ruby-gems&quot;&gt;Integration of other Ruby gems&lt;/h3&gt;
&lt;p&gt;I also have plans to integrate the ruby bindings for &lt;code&gt;gmp&lt;/code&gt;, &lt;code&gt;mpfr&lt;/code&gt; and &lt;code&gt;mpc&lt;/code&gt; libraries, that are already available as gems, with ruby bindings for our library. I have created an issue &lt;a href=&quot;https://github.com/sympy/symengine/issues/490&quot;&gt;here&lt;/a&gt;. Feel free to drop any suggestions.&lt;/p&gt;

&lt;p&gt;There is much scope for improvement in both the projects. For SymEngine, to support more features like polynomials and series-expansion in the near future, and improving the user interface and the exception handling for the extensions. In short, making the extensions more ruby-ish.&lt;/p&gt;

&lt;p&gt;I hope more people will contribute to the project and we will give a nice symbolic manipulation gem to the Ruby community.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Supporting substitutions</title>
   <link href="http://abinashmeher999.github.io/2015/08/15/supporting-substitutions/"/>
   <updated>2015-08-15T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/08/15/supporting-substitutions</id>
   <content type="html">&lt;p&gt;Hello All! I can say this week was quite productive. Ondrej, my mentor, had suggested me to make a new timeline for the rest of the time, and now I know how useful that turned out to be!&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;iruby-notebooks&quot;&gt;IRuby Notebooks&lt;/h2&gt;
&lt;p&gt;So, the &lt;a href=&quot;https://github.com/sympy/symengine/blob/master/symengine/ruby/notebooks/beginner.ipynb&quot;&gt;beginner notebook&lt;/a&gt; is now upto date and contains everything that you need to know to get started. Also, I have prepared another notebook, that takes an actual question on differentiation from math.stackoverflow.com and solves it using SymEngine. It can be found &lt;a href=&quot;https://github.com/sympy/symengine/blob/master/symengine/ruby/notebooks/differentiation_example.ipynb&quot;&gt;here&lt;/a&gt;. It really shows, how convenient can using SymEngine be.&lt;/p&gt;

&lt;h2 id=&quot;substitutions-module-smallsubssmall&quot;&gt;Substitutions module &lt;small&gt;(&lt;code&gt;#subs&lt;/code&gt;)&lt;/small&gt;&lt;/h2&gt;
&lt;p&gt;Now, you can mention what to substitute with what by storing the information in a Hash and then passing it to the &lt;code&gt;subs&lt;/code&gt; method on any expression. It will return the same expression where keys would have been substituted by their corresponding mapped values.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# (7/2)*k&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Making a Hash is not necessary, if you want to substitute just one variable&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 2+y+z&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;next-week&quot;&gt;Next Week&lt;/h2&gt;
&lt;p&gt;I will be working on porting the trigonometric functions, and documentation/cleanup work mostly. If time permits, maybe we can move to Matrices and that can go with my code sample for GSoC endterm evaluation.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Updated the beginner notebook&lt;/li&gt;
  &lt;li&gt;Added the Ruby wrappers for &lt;code&gt;#diff&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Added rspec tests for &lt;code&gt;#diff&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Example notebook demonstrating differentiation with an actual problem&lt;/li&gt;
  &lt;li&gt;Added the source for basic_subs2&lt;/li&gt;
  &lt;li&gt;Added c tests for basic_subs2&lt;/li&gt;
  &lt;li&gt;Modified implementation of basic_subs2&lt;/li&gt;
  &lt;li&gt;Added C wrapper source for map_basic_basic&lt;/li&gt;
  &lt;li&gt;Added tests for CMapBasicBasic&lt;/li&gt;
  &lt;li&gt;Added pending tests for &lt;code&gt;#subs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;supported 2 param &lt;code&gt;#subs&lt;/code&gt; with tests passing&lt;/li&gt;
  &lt;li&gt;Added c wrapper source for basic_subs&lt;/li&gt;
  &lt;li&gt;Added c tests for basic_subs&lt;/li&gt;
  &lt;li&gt;supported &lt;code&gt;#subs&lt;/code&gt; with Hash, tests pass&lt;/li&gt;
  &lt;li&gt;Added test cases for error checking&lt;/li&gt;
  &lt;li&gt;Added 3-element Hash test case for subs&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Wrapping up the Integer and Rational PR</title>
   <link href="http://abinashmeher999.github.io/2015/08/10/wrapping-up-of-integer-and-rational/"/>
   <updated>2015-08-10T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/08/10/wrapping-up-of-integer-and-rational</id>
   <content type="html">&lt;p&gt;Hey folks! Sorry for the delay. This week on 6th, I got free from the internship selections. Good News is that I got selected at Intuit for Summer 2016! Anyways I did wrap up the &lt;a href=&quot;https://github.com/sympy/symengine/pull/487&quot;&gt;PR#487&lt;/a&gt;&lt;!--more--&gt; in the remaining time. There were a few memory errors that after some discussion, I was able to solve. I also changed the function signature for &lt;code&gt;sympify&lt;/code&gt;. Now it needs an already allocated &lt;code&gt;basic&lt;/code&gt; and it is the responsibility of the caller to free it.&lt;/p&gt;

&lt;p&gt;Only thing that is yet incomplete is that the SymEngine classes Add, Mul and Pow are converted by default to &lt;code&gt;Basic&lt;/code&gt;. This doesn’t cause any bugs but will be clean to have. This is not a big priority now.&lt;/p&gt;

&lt;p&gt;I did document the scripts for debugging/development which are &lt;code&gt;valgrind_test.sh&lt;/code&gt;, &lt;code&gt;callgrind_test.sh&lt;/code&gt; and &lt;code&gt;gdb.sh&lt;/code&gt;. But the work flow that is followed for detection of memory leaks/errors is yet unclear. I did not find posts that explained this properly. Only a few posts explained the first part, i.e. suppressing the spurious errors that are caused by the funky way the MRI accesses memory. Nothing beyond that. If you happen to know how this is done(like telling apart the actual memory leaks from the ones that say ‘definitely lost’) please let me know. Everyone can benefit from such a post.&lt;/p&gt;

&lt;h2 id=&quot;next-week&quot;&gt;Next Week&lt;/h2&gt;
&lt;p&gt;The GSoC 2015 is upon completion and I have only 11 days remaining. Within that time, I will port the feature of &lt;code&gt;subs&lt;/code&gt; to ruby. First a simple one that will take a symbol and replace that one with the other in an expression. The last few days I will devote to documentation of the wrappers. I will also make a beginner contributing guide for the Ruby extensions.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Used sympify in &lt;code&gt;#coerce&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;Changed &lt;code&gt;sympify&lt;/code&gt; and &lt;code&gt;Klass_of_Basic&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Refactored for new sympify&lt;/li&gt;
  &lt;li&gt;ADD, MUL &amp;amp; POW now become Basic objs in rbwrappers&lt;/li&gt;
  &lt;li&gt;[ci skip] Documented callgrind_test script&lt;/li&gt;
  &lt;li&gt;[ci skip] Documented valgrind_test script&lt;/li&gt;
  &lt;li&gt;[ci skip] Relocated the debugging scripts to bin/&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Arithmetic Test Cases</title>
   <link href="http://abinashmeher999.github.io/2015/08/01/arithmetic-test-cases/"/>
   <updated>2015-08-01T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/08/01/arithmetic-test-cases</id>
   <content type="html">&lt;p&gt;Hey there! This week I implemented the suggestions given after the first round of review for &lt;a href=&quot;https://github.com/sympy/symengine/pull/487&quot;&gt;PR#487&lt;/a&gt; and I tried to port the test cases in &lt;code&gt;test_arit.py&lt;/code&gt; to &lt;code&gt;arit_spec.rb&lt;/code&gt;. It was worth it! The unit tests that I had written for the individual classes were not enough and didn’t cover every situation where an error might occur.&lt;!--more--&gt; Many test cases failed, indicating I had failed to include a corner case. After finding and fixing them, most of the cases passed except a few. They are&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;......FF..............................

Failures:

  1) Arithmetic test cases test_arit7
     Failure/Error: assert 2 * x - x == x
     TypeError:
       wrong argument type Fixnum (expected Class)
     # ./spec/arit_spec.rb:80:in `-&amp;#39;
     # ./spec/arit_spec.rb:80:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#39;

  2) Arithmetic test cases test_arit8
     Failure/Error: assert x**2 / x == x
     TypeError:
       wrong argument type Fixnum (expected Class)
     # ./spec/arit_spec.rb:94:in `/&amp;#39;
     # ./spec/arit_spec.rb:94:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#39;

Finished in 0.01956 seconds (files took 0.10097 seconds to load)
38 examples, 2 failures

Failed examples:

rspec ./spec/arit_spec.rb:75 # Arithmetic test cases test_arit7
rspec ./spec/arit_spec.rb:86 # Arithmetic test cases test_arit8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The error messages show that the argument type to &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt; are &lt;code&gt;Fixnum&lt;/code&gt;. And the error messages don’t even make sense. It can be clearly seen that the operand to &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt; are &lt;code&gt;SymEngine::Symbol&lt;/code&gt;s. I had even tried printing them out, just to be double sure. I am not able to figure out what might be the reason. Any help will be really appreciated.&lt;/p&gt;

&lt;p&gt;And there are still a few bugs in &lt;code&gt;sympify&lt;/code&gt;, the function that takes a ruby object and returns the corresponding C structure for the type.&lt;/p&gt;

&lt;h2 id=&quot;next-week&quot;&gt;Next Week&lt;/h2&gt;
&lt;p&gt;I know I again failed my this weeks target. There are just too many tests these companies(they are in our university to select interns) are taking and there are assignments on top of that. I did what I could.&lt;/p&gt;

&lt;p&gt;My next week’s target is to document everything I have done so far, including the beginner contributor guide. I know the pain of going through undocumented code, and I don’t want to turn away someone interested who has come to read my code.&lt;/p&gt;

&lt;p&gt;And it is obvious that the problems faced in getting the &lt;a href=&quot;https://github.com/sympy/symengine/pull/487&quot;&gt;PR#487&lt;/a&gt;, will be resolved by then, and sent for feedback. I am yet to confirm if we will be hosting the gem on RubyGems.org by then.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Moved module and class declarations to &lt;code&gt;symengine.h&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Removed modifications of &lt;code&gt;Fixnum&lt;/code&gt; and &lt;code&gt;Bignum&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Added method &lt;code&gt;sympify&lt;/code&gt; &amp;amp; modified &lt;code&gt;GET_SYMINTFROMVAL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Implemented class coercion. &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; can now be coerced into SymEngine classes&lt;/li&gt;
  &lt;li&gt;Updated test for large number&lt;/li&gt;
  &lt;li&gt;Added coercion tests for &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Added coercion tests for &lt;code&gt;Rational&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Used sympify in &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Added &lt;code&gt;arit_spec.rb&lt;/code&gt;, rspec equivalent of &lt;code&gt;test_arit.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Class Coercion in Ruby C extensions</title>
   <link href="http://abinashmeher999.github.io/2015/07/25/class-coercion-in-ruby-c-extensions/"/>
   <updated>2015-07-25T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/07/25/class-coercion-in-ruby-c-extensions</id>
   <content type="html">&lt;p&gt;Hola Everyone! Our classes started this week, and there was less time during the week than I had expected. Anyways, I am at the completion of the Ruby wrappers for the &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes.&lt;!--more--&gt; It would have been complete last week itself if it weren’t for the deadlines I had for registration. Mostly because of the companies that will be coming to the campus this week to select interns. This time I really am going to complete it this weekend for sure.&lt;/p&gt;

&lt;h2 id=&quot;class-coercion&quot;&gt;Class Coercion&lt;/h2&gt;
&lt;p&gt;I didn’t know of this technique until &lt;a href=&quot;www.github.com/isuruf&quot;&gt;Isuru&lt;/a&gt; suggested me not to modify the existing Ruby classes, and rather have a look at &lt;em&gt;Class Coercion in Ruby&lt;/em&gt;. This is an elegant concept to get seamless inter-operation between existing classes and new classes without having to modify the default library code.&lt;/p&gt;

&lt;p&gt;My aim was to support operation of SymEngine classes like &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Rational&lt;/code&gt; and &lt;code&gt;Complex&lt;/code&gt; with the existing classes &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes from the Ruby kernel. For that I had supported the operations in the C wrappers. Like, if the other parameter object passed to the method is not of a SymEngine type but a Ruby object, I would first convert it into the corresponding SymEngine object, and then use it for operation.&lt;/p&gt;

&lt;p&gt;This supported all the operations of the kind &lt;code&gt;a * 2&lt;/code&gt;, where &lt;code&gt;a&lt;/code&gt; is an object of the type &lt;code&gt;SymEngine::Integer&lt;/code&gt;. But I had to support &lt;code&gt;2 * a&lt;/code&gt; too. That meant (for me) changing the existing class. Overriding all the existing binary operations for it to support &lt;code&gt;SymEngine&lt;/code&gt; types, violating the &lt;a href=&quot;https://en.wikipedia.org/wiki/Open/closed_principle&quot;&gt;open/closed principle&lt;/a&gt;. It was like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fixnum&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:old_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:+&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;old_add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:old_sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:-&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;old_sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:old_mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:*&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;old_mul&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:old_div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;old_div&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:old_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:**&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;old_pow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And to make it more WET, I had to do the same for the &lt;code&gt;Bignum&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;I had to use aliases to avoid getting in a endless recursive loop, that eventually lead to stack overflow.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.mutuallyhuman.com/blog/2011/01/25/class-coercion-in-ruby/&quot;&gt;blog post&lt;/a&gt; explains the procedure of using &lt;em&gt;Class Coercion&lt;/em&gt; in detail. Please give it a read. I would also have updated this post to include my implementation in the &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes.&lt;/p&gt;

&lt;h2 id=&quot;next-week&quot;&gt;Next Week&lt;/h2&gt;
&lt;p&gt;By this time next week, I would have fully supported the &lt;code&gt;Complex&lt;/code&gt; class and it’s methods. The &lt;em&gt;RSpec&lt;/em&gt; counter-part of the &lt;code&gt;test_arit.py&lt;/code&gt; would have been done too.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Configured spec_helper to work with test_unit&lt;/li&gt;
  &lt;li&gt;Added test-unit as development dependency&lt;/li&gt;
  &lt;li&gt;Added script to test with valgrind&lt;/li&gt;
  &lt;li&gt;Added script to test with callgrind tool&lt;/li&gt;
  &lt;li&gt;Updated .gitignore Added notebooks/Gemfile.lock and callgrind generated files&lt;/li&gt;
  &lt;li&gt;Added source for &lt;code&gt;#new&lt;/code&gt; in Integer&lt;/li&gt;
  &lt;li&gt;Added tests for &lt;code&gt;#new&lt;/code&gt; in Integer&lt;/li&gt;
  &lt;li&gt;Made a macro to get Integer from T_INTEGER VALUE&lt;/li&gt;
  &lt;li&gt;Added source for &lt;code&gt;.new&lt;/code&gt; method in Rational&lt;/li&gt;
  &lt;li&gt;Added tests for instantiation of Rational&lt;/li&gt;
  &lt;li&gt;[ci skip] Added script to debug tests in gdb&lt;/li&gt;
  &lt;li&gt;Integer class now supports &lt;code&gt;2*a&lt;/code&gt; &amp;amp; &lt;code&gt;a*2&lt;/code&gt; assignments&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Common Enumeration in C and C++</title>
   <link href="http://abinashmeher999.github.io/2015/07/17/common-enumeration-in-c-and-c++/"/>
   <updated>2015-07-17T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/07/17/common-enumeration-in-c-and-c++</id>
   <content type="html">&lt;p&gt;Welcome back! Well, I did get most of my pending PRs merged last week, but I won’t go as far to say that I was at my full efficiency. I indeed got entangled in some work and it got me distracted. Good news is &lt;code&gt;Symbol&lt;/code&gt; is now officially supported in SymEngine ruby bindings and can be played with from the latest master&lt;/p&gt;

&lt;p&gt;In this post, I would like to concentrate more on a hack that we used to use &lt;code&gt;enum&lt;/code&gt;s in both &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;C++&lt;/code&gt;,&lt;!--more--&gt; that too within namespaces (within C you say? kinda.), so that they don’t possibly conflict with anything. We automated the whole thing and instantly saw the benefit. We used the same approach for writing the same repetitive method for all classes and came to know that we had somehow missed a method from a class.&lt;/p&gt;

&lt;h1 id=&quot;the-file-that-has-the-list&quot;&gt;The File that has the list&lt;/h1&gt;
&lt;p&gt;There has to be a file enlisting all the classes,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//File: type_codes.inc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYMENGINE_ENUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYMENGINE_ENUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTEGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYMENGINE_ENUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RATIONAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//more 47 lines...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;in-the-c-implementation-file&quot;&gt;In the C implementation file&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//File: cwrapper.h&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#define SYMENGINE_ENUM(type) SYMENGINE_##type&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#include &amp;quot;symengine/type_codes.inc&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#undef SYMENGINE_ENUM&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SYMENGINE_TypeID_Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;in-the-c-implementation-file-1&quot;&gt;In the C++ implementation file&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//File: basic.h&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#define SYMENGINE_ENUM(type) type&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#include &amp;quot;symengine/type_codes.inc&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#undef SYMENGINE_ENUM&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The &amp;#39;TypeID_Count&amp;#39; returns the number of elements in &amp;#39;TypeID&amp;#39;. For this&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// to work, do not assign numbers to the elements above (or if you do, you&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// must assign the correct count below).&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TypeID_Count&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is really an elegant solution. This can also be extended to all the other situations where you want to define or do the same thing for all the classes. You just need to enlist them at a certain place and use macros to generate/automate the process of writing the methods. You add a class and those methods get define for the class.&lt;/p&gt;

&lt;p&gt;I would highly suggest you to have a look at &lt;a href=&quot;https://github.com/sympy/symengine/issues/520&quot;&gt;Issue#520&lt;/a&gt; and &lt;a href=&quot;https://github.com/sympy/symengine/pull/540&quot;&gt;PR#540&lt;/a&gt; to have a look at how we extended this approach to automate the long and WET code in &lt;code&gt;Visitor&lt;/code&gt; and &lt;code&gt;BaseVisitor&lt;/code&gt; classes.&lt;/p&gt;

&lt;h2 id=&quot;next-week&quot;&gt;Next Week&lt;/h2&gt;
&lt;p&gt;I will try my best to get &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; to get merged during the weekend and during the week I can focus on the &lt;code&gt;Complex&lt;/code&gt; class. Also, next week I will focus on unwrapping the data from &lt;code&gt;gmp&lt;/code&gt; gem. We use it with SymEngine then why not with its Ruby bindings.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Refactored ruby/ext src files to use basic_new_heap&lt;/li&gt;
  &lt;li&gt;eq() and neq() use the new func sign after PR#508&lt;/li&gt;
  &lt;li&gt;Overrid &lt;code&gt;#eql?&lt;/code&gt;, &lt;code&gt;#hash&lt;/code&gt; in Basic to compare sets&lt;/li&gt;
  &lt;li&gt;Used basic_new_heap &amp;amp; Data_Wrap_Struct in alloc_func&lt;/li&gt;
  &lt;li&gt;Removed csymbol_alloc and alloc_func&lt;/li&gt;
  &lt;li&gt;Removed cbasic_init, uses default new now&lt;/li&gt;
  &lt;li&gt;Fixed typo in cwrapper&lt;/li&gt;
  &lt;li&gt;Added the C wrapper &amp;amp; its tests for Basic hash&lt;/li&gt;
  &lt;li&gt;Added the Ruby wrappers for hash&lt;/li&gt;
  &lt;li&gt;Changed implementation of basic_hash in cwrapper&lt;/li&gt;
  &lt;li&gt;Enum-Class mapping, selective exclude in type_codes.inc&lt;/li&gt;
  &lt;li&gt;Refactored for new SYMENGINE_ENUM macro signature&lt;/li&gt;
  &lt;li&gt;Used type_codes.inc to simplify code in visitor.h&lt;/li&gt;
  &lt;li&gt;Configured spec_helper to work with test_unit&lt;/li&gt;
  &lt;li&gt;Added test-unit as development dependency&lt;/li&gt;
  &lt;li&gt;Added script to test with valgrind&lt;/li&gt;
  &lt;li&gt;Added script to test with callgrind tool&lt;/li&gt;
  &lt;li&gt;Updated .gitignore&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Integer and Rational classes</title>
   <link href="http://abinashmeher999.github.io/2015/07/10/integer-and-rational-classes/"/>
   <updated>2015-07-10T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/07/10/integer-and-rational-classes</id>
   <content type="html">&lt;p&gt;Hola! The refactoring of the C Interface has been done, and I did figure out how to test the Ruby bindings with the help of &lt;code&gt;Valgrind&lt;/code&gt; and without the &lt;code&gt;rake-tester&lt;/code&gt; gem.&lt;!--more--&gt; It needs a bunch a flags to tell the tool that it’s ok the way ruby accesses memory, and that the warnings can be &lt;em&gt;suppressed&lt;/em&gt;. Still, to be sure that the memory leaks that we see in the report/output are all good memory leaks we need to execute the tests in a loop. Which is pending. I have a &lt;code&gt;arit_spec.rb&lt;/code&gt; that reproduces the test cases from &lt;code&gt;test_arit.py&lt;/code&gt;, the python test file for testing the python wrappers.&lt;/p&gt;

&lt;p&gt;I am still debugging the errors in the wrappers for &lt;code&gt;get_args&lt;/code&gt; and &lt;code&gt;free_symbols&lt;/code&gt;. The test &lt;code&gt;arit_spec.rb&lt;/code&gt; depends on it. Only then I can maybe run them in a loop. I am still not yet sure how to run rspec tests in a loop. Shouldn’t be that complex. My closest guess is that, it might be because of a premature GC collection. We do have &lt;code&gt;RB_GC_GUARD&lt;/code&gt; for that in the Ruby C API. I came to this conclusion, since it wasn’t solved even after we implemented the functions to allocate &lt;code&gt;basic&lt;/code&gt; in a heap and rectified the possible errors in the C API code.&lt;/p&gt;

&lt;p&gt;I decided to come back to the error after I made some progress with the &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes. I think I made the wrong decision, I should have resolved that earlier error first. But good thing is, I have figured out the way I can use polymorphism(mixins, and overloading) and function overloading(decide inside a single function definition by switch) in them. I need the method &lt;code&gt;get_type_code&lt;/code&gt; for that so that in the function I can call the method to know the type of the VALUE that has been passed to the function inside the C API code(objects made with &lt;code&gt;Data_Wrap_Struct&lt;/code&gt; have the data type as &lt;code&gt;T_DATA&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;next-week&quot;&gt;Next Week&lt;/h2&gt;
&lt;p&gt;I will make the script that will run the tests in the loop to check for memory leaks. And get my other unmerged PRs merged, they have been there for a long time now. Then, implement the ways that I mentioned above in the &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes. These will also require modifying the existing tested code for arithmetic operations. This is why, I would get the other PRs get merged first. Things have turned a little bit dependent on each other.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Moved TypeIDs to a common header for both C &amp;amp; C++&lt;/li&gt;
  &lt;li&gt;Attempt to use TypeID in cwrapper files&lt;/li&gt;
  &lt;li&gt;[ci skip] rectified indentation in Ruby files&lt;/li&gt;
  &lt;li&gt;Removed old defs: free_symbols &amp;amp; get_args in Cwrp&lt;/li&gt;
  &lt;li&gt;Added setbasic_get in cwrappers&lt;/li&gt;
  &lt;li&gt;Added &lt;code&gt;#free_symbols&lt;/code&gt; to Basic class, tests fail&lt;/li&gt;
  &lt;li&gt;Added method &lt;code&gt;#args&lt;/code&gt; to Basic, tests don’t pass&lt;/li&gt;
  &lt;li&gt;args &amp;amp; free_symbols return basic allocated on heap&lt;/li&gt;
  &lt;li&gt;Fixed Typo in &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; headers&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Improving the C Interface</title>
   <link href="http://abinashmeher999.github.io/2015/07/03/improving-the-c-interface/"/>
   <updated>2015-07-03T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/07/03/improving-the-c-interface</id>
   <content type="html">&lt;p&gt;Hello! I am halfway through my project. I can’t say that I achieved what I aimed to, but all the things that pushed this further weren’t delays, they needed to be done. The few things that were delays taught me a lot. They were worth the effort to lay a strong foundation. It has been an amazing learning experience, and makes me even more excited for what’s to come.&lt;/p&gt;

&lt;p&gt;Anyways, I will summarize what I did this week.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;improved-c-interface&quot;&gt;Improved C Interface&lt;/h2&gt;
&lt;p&gt;While the plan was to develop and add the feature for &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; and automating memory leak checks, it took a turn towards improving the current &lt;code&gt;C&lt;/code&gt; interface. While writing the c wrapper code for the function &lt;code&gt;SymEngine::free_symbols&lt;/code&gt;, the task was to transfer the information that was in C++ datatype to something in C so that is accessible in C. The return type of the C++ functions were a &lt;code&gt;std::vector&lt;/code&gt; in one case and &lt;code&gt;std::set&lt;/code&gt; in other. The obvious idea that came to my mind was to map them to an array of pointers that pointed to these data. This idea was also a result of us using &lt;code&gt;reinterpret_cast&lt;/code&gt; to change the pointer type to another while transfering from &lt;code&gt;C++&lt;/code&gt; to &lt;code&gt;C&lt;/code&gt; and back to &lt;code&gt;C++&lt;/code&gt;. This was obviously not a good approach as there were too many pointers and they created very hard to correct errors in the code.&lt;/p&gt;

&lt;p&gt;Ondrej came across this &lt;a href=&quot;http://yosefk.com/c++fqa/fqa.html#fqa-32.8&quot;&gt;link&lt;/a&gt;. And suggested we adopt this method, as it was a really elegant solution for this.&lt;/p&gt;

&lt;p&gt;The C interface now is lot more simplified. We declare the struct in the header file whereas the definition is done in the source file. The source file can indeed use &lt;code&gt;C++&lt;/code&gt;. The header file is like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//File: cwrapper.h&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ctypename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ctypename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;typename_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ctypename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the source file is like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//File: cwrapper.cpp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ctypename&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Cpptype&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typename_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ctypename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Elegant! Isn’t it?&lt;/p&gt;

&lt;p&gt;You can find the details of our implementation by my mentor, Ondrej Certik  &lt;a href=&quot;https://github.com/sympy/symengine/pull/495&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;iruby-notebook&quot;&gt;IRuby notebook&lt;/h3&gt;
&lt;p&gt;I have also prepared an IRuby notebook that will serve as a beginner notebook to get familiar with the gem. You can find it &lt;a href=&quot;https://github.com/sympy/symengine/pull/489&quot;&gt;here&lt;/a&gt;. It contains only what the gem supports right now. I will add more notebooks as I add more features.&lt;/p&gt;

&lt;h3 id=&quot;checking-for-memory-leaks&quot;&gt;Checking for memory leaks&lt;/h3&gt;
&lt;p&gt;As I had mentioned in my plan for the last week, I did search for ways to automate checking for memory leaks. I have come across many tools for checking for memory leaks in Ruby, but for testing the &lt;code&gt;C&lt;/code&gt; extensions, &lt;code&gt;Valgrind&lt;/code&gt; and &lt;code&gt;gdb&lt;/code&gt; are the ones that almost all of the blogs suggest. I have explained how I plan to proceed in the issue &lt;a href=&quot;https://github.com/sympy/symengine/issues/501&quot;&gt;Checking Ruby C Extensions for memory leaks. #501&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is really difficult to check for memory leaks even by ourselves, after seeing the output. I came to the conclusion that it will be very difficult to write a script that can check for memory leaks during the Continuous-Integration using Travis-CI, which was part of the initial plan. So, I have decided to automate checking of memory leaks by &lt;code&gt;Valgrind&lt;/code&gt; and &lt;code&gt;gdb&lt;/code&gt; from &lt;code&gt;rake&lt;/code&gt;, and this will only ease the plan of launching the debugging session. This way developer will have to launch the tasks and manually go through the report to debug it, before pushing the code to be assured that it is free of memory leaks.&lt;/p&gt;

&lt;h3 id=&quot;integration-of-other-ruby-gems&quot;&gt;Integration of other ruby gems&lt;/h3&gt;
&lt;p&gt;I also have plans to integrate the ruby bindings for &lt;code&gt;gmp&lt;/code&gt;, &lt;code&gt;mpfr&lt;/code&gt; and &lt;code&gt;mpc&lt;/code&gt; libraries, that are already available as gems, with ruby bindings for our library. I have created an issue &lt;a href=&quot;https://github.com/sympy/symengine/issues/490&quot;&gt;here&lt;/a&gt;. Feel free to drop any suggestions.&lt;/p&gt;

&lt;h2 id=&quot;next-week&quot;&gt;Next week&lt;/h2&gt;
&lt;p&gt;The plan for the next week includes complete refactoring of the Ruby C API according to the new improved interface, setting up of rake tasks to detect memory leaks and add support for &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Added a beginner IRuby notebook&lt;/li&gt;
  &lt;li&gt;Removed IRuby dependency from gemspec&lt;/li&gt;
  &lt;li&gt;Added the &lt;code&gt;#to_iruby&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;Added C wrapper for free_symbols&lt;/li&gt;
  &lt;li&gt;Added Ruby wrapper for &lt;code&gt;#free_symbols&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Added C wrapper for Basic::get_args&lt;/li&gt;
  &lt;li&gt;Refactored CRCPBasic in C wrappers and tests&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>The Symbol Class</title>
   <link href="http://abinashmeher999.github.io/2015/06/26/the-symbol-class/"/>
   <updated>2015-06-26T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/06/26/the-symbol-class</id>
   <content type="html">&lt;p&gt;Hi everyone! The midterm evaluations for GSoC-2015 have arrived. These will last for about a week, in which we will be evaluated on the basis of our performance.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Beginning of this week, I got my PR merged. I had 49 randomly ordered commits that I managed to squeeze into only 13! I can say I have got a very good hold of &lt;code&gt;git rebase -i&lt;/code&gt; by now.&lt;/p&gt;

&lt;p&gt;This week was spent more towards developing the wrappers for &lt;code&gt;Symbol&lt;/code&gt; class, adding methods, writing tests and trying to find memory leaks. The obvious choice to detect memory leaks is Valgrind, but after using RSpec, I am looking for a more Rubyish way to detect memory leaks. I am still going through some guides on how to detect memory leaks, be it Valgrind or something else. Any suggestions will be really appreciated. You can review the work in my PR &lt;a href=&quot;https://github.com/sympy/symengine/pull/480&quot;&gt;#480 Support for Symbols in Ruby wrappers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the things I felt like worth writing in a blog post is as follows&lt;/p&gt;

&lt;h2 id=&quot;inheritance-in-ruby-c-api&quot;&gt;Inheritance in Ruby C API&lt;/h2&gt;

&lt;p&gt;We know how inheritance works in C++, if we have a class, say &lt;code&gt;SubC&lt;/code&gt;, that is the subclass of a particular class, say &lt;code&gt;C&lt;/code&gt;. When we make an object of the class &lt;code&gt;SubC&lt;/code&gt;, the constructor for the class &lt;code&gt;C&lt;/code&gt; is called first and then the constructor for &lt;code&gt;SubC&lt;/code&gt; along with the initialization that it might need to do. In Ruby, this happens in two steps. One is a method call to &lt;code&gt;.allocate&lt;/code&gt;, which is most of the time done internally, and then the method &lt;code&gt;.initialize&lt;/code&gt; to initialize the content of the object. So, when I was writing the wrappers for &lt;code&gt;Symbol&lt;/code&gt;, Isuru, one of my team-mates, raised this question. &lt;code&gt;Symbol&lt;/code&gt; is a subclass of &lt;code&gt;Basic&lt;/code&gt; and I have the code in&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Init_symengine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m_symengine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_define_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;SymEngine&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c_basic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_define_class_under&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_symengine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Basic&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_cObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rb_define_alloc_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_basic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbasic_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c_symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_define_class_under&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_symengine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Symbol&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_basic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rb_define_alloc_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csymbol_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now overloading the &lt;code&gt;allocate&lt;/code&gt; method through the C API to set the custom allocate function has been deprecated and it is advised to use the &lt;code&gt;rb_define_alloc_func&lt;/code&gt; now. In the method, &lt;code&gt;rb_define_class_under&lt;/code&gt;, the third argument is the name of the base class. So the doubt was, will the function &lt;code&gt;cbasic_alloc&lt;/code&gt; be called along with &lt;code&gt;csymbol_alloc&lt;/code&gt;, since &lt;code&gt;Basic&lt;/code&gt; is the base class for &lt;code&gt;Symbol&lt;/code&gt;? And also &lt;code&gt;csymbol_alloc&lt;/code&gt; did nothing but called the &lt;code&gt;cbasic_alloc&lt;/code&gt; function inside it. So, will the function be called twice.&lt;/p&gt;

&lt;p&gt;To get the answer, I tried searching on the internet and tried reading the source code, but couldn’t make much sense out of it. Neither anyone had made such classes and wrote about how they behave.&lt;/p&gt;

&lt;p&gt;So, I got the function &lt;code&gt;cbasic_alloc&lt;/code&gt; to print ‘basic object allocated’ everytime it got called.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbasic_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;basic_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data_Make_Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basic_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbasic_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;struct_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;basic object allocated&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now normally, expecting the same behaviour as C++ in C API, one would expect to see the message printed twice when a &lt;code&gt;Symbol&lt;/code&gt; object was created, but that’s not what I got.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;//&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rspec spec --format documentation
SymEngine
  SymEngine::Basic
    .new
      with no arguments
basic object allocated
        returns a Basic object

SymEngine
  SymEngine::Symbol
    .new
      with an integer as an argument
basic object allocated
        returns a Symbol object
    binary operations&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Only &lt;code&gt;csymbol_alloc&lt;/code&gt; was called when &lt;code&gt;Symbol&lt;/code&gt; was instantiated. Maybe the sole responsibility to create an object is given to the function passed. The parameter passed as the base class might only be for identification in Ruby that what is a subclass of whom.&lt;/p&gt;

&lt;p&gt;Soon, I will be adding support for &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes after which you will be able to form expressions using integers like &lt;code&gt;(x+y)**2&lt;/code&gt; instead of &lt;code&gt;(x+y)*(x+y)&lt;/code&gt;. You can follow the work in the PR &lt;a href=&quot;https://github.com/sympy/symengine/pull/487&quot;&gt;#487 Support for Integer and Rational classes in Ruby wrappers&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;next-week&quot;&gt;Next Week&lt;/h3&gt;
&lt;p&gt;The plan for next week is to completely support &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes along with automation of testing for memory leaks. I don’t even know, if it would be feasible to integrate testing of memory leaks to &lt;em&gt;Continuous-Integration&lt;/em&gt;, but it’s a worth a shot. It will be very convenient to have an alert system that warns you about memory leaks everytime you push the code.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Added source files for symbol&lt;/li&gt;
  &lt;li&gt;Added expand method to Basic&lt;/li&gt;
  &lt;li&gt;Added the to_s method that returns the string rep returns the string representation&lt;/li&gt;
  &lt;li&gt;Added the tests for symbol from basic&lt;/li&gt;
  &lt;li&gt;Moved the symbol related files to symengine/ruby&lt;/li&gt;
  &lt;li&gt;Rearranged the tests betn Symbol and Basic, Corrected the descriptions&lt;/li&gt;
  &lt;li&gt;Added the &lt;code&gt;==&lt;/code&gt; operator for Basic class Added test for &lt;code&gt;==&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Added method &lt;code&gt;!=&lt;/code&gt; in Basic&lt;/li&gt;
  &lt;li&gt;Added &lt;code&gt;alloc_func&lt;/code&gt; and removed repetitive headers&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Instantiating a Basic object</title>
   <link href="http://abinashmeher999.github.io/2015/06/25/Instantiating-a-Basic-object/"/>
   <updated>2015-06-25T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/06/25/Instantiating-a-Basic-object</id>
   <content type="html">&lt;p&gt;Hi there! If you are following the blog, you would know how many errors I faced to setup and start writing the Ruby extensions. I don’t even remember half of the errors that I faced 2 weeks before. Well, that is why we have blog posts :P. We don’t want to miss a single takeaway from this experience.&lt;/p&gt;

&lt;p&gt;My PR in the symengine repo, &lt;a href=&quot;https://github.com/sympy/symengine/pull/414&quot;&gt;#414 Ruby file structure and Basic class&lt;/a&gt;, finally got merged!&lt;!--more--&gt; It was the most significant PR that I had got merged till now. 126 conversations! &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondrej&lt;/a&gt;, &lt;a href=&quot;https://github.com/isuruf&quot;&gt;Isuru&lt;/a&gt; and &lt;a href=&quot;https://github.com/dilcom&quot;&gt;Ivan&lt;/a&gt; were the ones who helped me to solve them. If it weren’t for them, it would have taken me 2 more weeks to figure it out for myself. I can’t thank them enough. I would like to keep this post concise, so if you are curious about the errors you would like my previous posts under the tag &lt;a href=&quot;http://abinashmeher999.github.io/tag/GSoC-2015/&quot;&gt;GSoC-2015&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setup-different-from-other-gems&quot;&gt;Setup different from other gems&lt;/h2&gt;
&lt;p&gt;The gem is different from other practices from other gems in a sense that our focus was to get rid of any dependencies that was not essential. Only the ones without which the extensions can’t be built. Like we got rid of &lt;code&gt;extconf.rb&lt;/code&gt; and hence the &lt;code&gt;mkmf&lt;/code&gt; module. The &lt;code&gt;Makefile&lt;/code&gt; is now generated by &lt;code&gt;cmake&lt;/code&gt;. Another one is &lt;code&gt;rake&lt;/code&gt; and the &lt;code&gt;Rakefile&lt;/code&gt;, tasks will be automated by the help of &lt;code&gt;python&lt;/code&gt; in the future. However, we still use &lt;code&gt;rdoc&lt;/code&gt; and &lt;code&gt;rspec&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;features-supported-now&quot;&gt;Features supported now&lt;/h2&gt;
&lt;p&gt;Currently, there is not much the extension supports. You can only instantiate a &lt;code&gt;Basic&lt;/code&gt; class. The gem has a module &lt;code&gt;SymEngine&lt;/code&gt;(It has a cool easter egg ;) too). The &lt;code&gt;Basic&lt;/code&gt; class is a part of the module. To make the object, do&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`symengine`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More features like making expressions out of symbols, by addition, subtraction, multiplication and division will be soon be introduced with the PR &lt;a href=&quot;https://github.com/sympy/symengine/pull/480&quot;&gt;#480 Support for Symbol in Ruby wrappers&lt;/a&gt;. After that, users can do things like&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;symengine&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;SymEngine::Symbol:0x00000002708328&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;SymEngine::Symbol:0x00000002700cb8&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;SymEngine::Symbol:0x000000026f78e8&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;SymEngine::Symbol:0x000000026eaa58&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;(x + y + z)**2&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;SymEngine::Symbol:0x000000026e2920&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2*x*y + 2*x*z + 2*y*z + x**2 + y**2 + z**2&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And not long after the PR is merged, I would have added the support for &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes.&lt;/p&gt;

&lt;p&gt;I would love to have your feedback. Please follow the instructions from &lt;a href=&quot;https://github.com/sympy/symengine/tree/master/symengine/ruby&quot;&gt;README&lt;/a&gt; to install the gem and give it a try. If you are interested to know about the future options that will be supported, you can go through my &lt;a href=&quot;https://github.com/abinashmeher999/sciruby/wiki/GSoC-2015-Abinash-Meher:-Ruby-bindings-for-CSymPy#timeline-tentative&quot;&gt;project proposal&lt;/a&gt; or browse through the current &lt;a href=&quot;https://github.com/sympy/symengine&quot;&gt;SymEngine&lt;/a&gt; codebase. The source code for the gem can be found &lt;a href=&quot;https://github.com/sympy/symengine/tree/master/symengine/ruby&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comments are always welcome :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Reconfiguring building and Travis Setup</title>
   <link href="http://abinashmeher999.github.io/2015/06/19/Reconfiguring-building-and-Travis-Setup/"/>
   <updated>2015-06-19T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/06/19/Reconfiguring-building-and-Travis-Setup</id>
   <content type="html">&lt;p&gt;This week was one of the most engaging one for me up until now.  Not in a way that I could write thousands of lines of code, but more like I intensively collaborated with people online, to debug code. Many errors popped up,&lt;!--more--&gt; I discussed them with team-mates and we arrived at a solution(it was more like them telling me the solution :P). This whole week was spend trying to debug errors and get the wrappers to work and get integrated with Travis-CI. I will explain how we tackled them, one by one. I got done with so many things this week, that I am confused where to begin.&lt;/p&gt;

&lt;h2 id=&quot;problems-in-project-setup-and-building&quot;&gt;Problems in project setup and building&lt;/h2&gt;
&lt;p&gt;After solving the &lt;code&gt;LoadError&lt;/code&gt; for the extensions. One of the other errors that we faced was something like this, a symbol lookup error&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;symengine&amp;#39;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;002&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SymEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abinashmeher999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basic_init&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The library for the extensions &lt;code&gt;symengine.so&lt;/code&gt; wasn’t able to find the library at runtime. It was very much dependent if the library for symengine &lt;code&gt;libsymengine&lt;/code&gt; was compiled as a static or dynamic library. And in my case, I had the static version(libsymengine.a) and I had to make and install the dynamic version(libsymengine.so). This solved the issue, but again there was another error&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;symengine&amp;#39;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;LoadError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abinashmeher999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__cxa_pure_virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abinashmeher999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abinashmeher999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site_ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubygems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core_ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_require&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`require&amp;#39;&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;    from /home/abinashmeher999/.rvm/rubies/ruby-2.2.0/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    from /home/abinashmeher999/.rvm/gems/ruby-2.2.0/gems/symengine-0.0.0.pre/lib/symengine.rb:1:in `&amp;lt;top (required)&amp;gt;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abinashmeher999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site_ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubygems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core_ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_require&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`require&amp;#39;&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;    from /home/abinashmeher999/.rvm/rubies/ruby-2.2.0/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:128:in `&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    from /home/abinashmeher999/.rvm/rubies/ruby-2.2.0/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:39:in `require&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abinashmeher999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&amp;lt;main&amp;gt;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now this symbol is defined in the C++ standard library. I had to compile the C wrappers using a C++ compiler to link against it. I configured the &lt;code&gt;extconf.rb&lt;/code&gt; to use a C++ compiler.&lt;/p&gt;

&lt;p&gt;One of our aims during developing this was to get rid of unessential dependencies. The ones we already had the tools for. Like later the file &lt;code&gt;extconf.rb&lt;/code&gt;, that is used to generate Makefile for the extension was removed, because that could also be done by &lt;code&gt;cmake&lt;/code&gt;. Flags were added to &lt;code&gt;cmake&lt;/code&gt; for building the Ruby extensions, like the flag &lt;code&gt;-DWITH_RUBY=yes&lt;/code&gt;. The Makefile then generates the library &lt;code&gt;symengine.so&lt;/code&gt; in the directory &lt;code&gt;lib/symengine&lt;/code&gt;. The one that we were not able to load the previous week. Along with &lt;code&gt;extconf.rb&lt;/code&gt;, the file &lt;code&gt;extconf.h&lt;/code&gt; was also gone. Along these lines, the dependency on rake was also removed, and with that the &lt;code&gt;Rakefile&lt;/code&gt;. Any task automation will most probably be done in python. So, the &lt;code&gt;Rake::ExtensionTask&lt;/code&gt; was done by &lt;code&gt;cmake&lt;/code&gt; and the &lt;code&gt;Rake::GemPackageTask&lt;/code&gt; was replaced by the manual method of &lt;code&gt;gem build symengine.gemspec&lt;/code&gt; and &lt;code&gt;gem install symengine-0.0.0.gem&lt;/code&gt;.
&lt;a href=&quot;https://gist.github.com/289dfcf0834bfa14d32e.git&quot;&gt;mkmf.log&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;travis-setup&quot;&gt;Travis Setup&lt;/h2&gt;
&lt;p&gt;Not many projects have travis-ci setup for multiple languages. Not even the tutorials had clearly mentioned about setting up for multiple languages. But I did know about one of them, which is Shogun, the machine-learning toolbox. I referred to their &lt;code&gt;.travis.yml&lt;/code&gt; and setup something like this,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;clang&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;BUILD_TYPE=&amp;quot;Debug&amp;quot; WITH_BFD=&amp;quot;yes&amp;quot; WITH_SYMENGINE_ASSERT=&amp;quot;yes&amp;quot; WITH_PYTHON=&amp;quot;yes&amp;quot; PYTHON_VERSION=&amp;quot;2.7&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;clang&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ruby&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;WITH_RUBY=&amp;quot;yes&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1.9.3&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ruby&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;WITH_RUBY=&amp;quot;yes&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;2.0&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ruby&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;WITH_RUBY=&amp;quot;yes&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;2.1&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ruby&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;WITH_RUBY=&amp;quot;yes&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;2.2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We were doubtful if something like this would work. The earlier plan was to manually install the required version of ruby and then execute the shell commands to build the respective libraries. But this worked, build jobs with Ruby as the language were indeed created and I felt like I was beginning to understand how travis takes in the parameters and soon I will be doing some experiments with &lt;code&gt;.travis.yml&lt;/code&gt; :), out of this project.&lt;/p&gt;

&lt;h3 id=&quot;commits&quot;&gt;Commits:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Added TEST_IN_TREE=yes in env for builds with Ruby&lt;/li&gt;
  &lt;li&gt;Printing if symengine.so was made&lt;/li&gt;
  &lt;li&gt;Printing files in lib/symengine/ in travis log&lt;/li&gt;
  &lt;li&gt;Replaced ../lib with ../../lib in expand_path&lt;/li&gt;
  &lt;li&gt;Added lib to $LOAD_PATH &amp;amp; removed require_relative&lt;/li&gt;
  &lt;li&gt;Added the LOAD_PATH code in gemspec&lt;/li&gt;
  &lt;li&gt;Added lib/symengine to $LOAD_PATH&lt;/li&gt;
  &lt;li&gt;Added lib to $LOAD_PATH in spec_helper and removed gem install symengine&lt;/li&gt;
  &lt;li&gt;Added rest of the tests with pending statuses&lt;/li&gt;
  &lt;li&gt;[ci skip] untabified gemspec (converted tabs to spaces)&lt;/li&gt;
  &lt;li&gt;Installing the gem while testing Ideally this should not be done. This is just t&lt;/li&gt;
  &lt;li&gt;Changed the version from 0.0.0.pre to 0.0.0&lt;/li&gt;
  &lt;li&gt;Test push to debug travis failures&lt;/li&gt;
  &lt;li&gt;Added sudo: true to .travis.yml to support new container-based infrastructure in&lt;/li&gt;
  &lt;li&gt;Fixed errors in ruby_basic.c&lt;/li&gt;
  &lt;li&gt;Experimental fix with FindRuby.cmake&lt;/li&gt;
  &lt;li&gt;Kept duplicate LICENSE as temporary fix for installation errors&lt;/li&gt;
  &lt;li&gt;Added functions for binary, unary op&lt;/li&gt;
  &lt;li&gt;Changed symengine_BINARY_DIR to symengine_SOURCE_DIR&lt;/li&gt;
  &lt;li&gt;Added FindPackageHandleStandardArgs.cmake&lt;/li&gt;
  &lt;li&gt;Removed installation of new Bundler&lt;/li&gt;
  &lt;li&gt;Added new FindRuby.cmake&lt;/li&gt;
  &lt;li&gt;Moved dependencies from Gemfile to gemspec And rectified error in CMakelists.txt&lt;/li&gt;
  &lt;li&gt;Experimental fix for build errors removed the empty &lt;code&gt;if[[ &quot;${WITH_RUBY}&quot; != &quot;&quot; ]&lt;/code&gt;`&lt;/li&gt;
  &lt;li&gt;Attempt at travis integration for building and testing the extensions&lt;/li&gt;
  &lt;li&gt;Updated configuration for rspec&lt;/li&gt;
  &lt;li&gt;Rectified error in CMakeLists and updated README&lt;/li&gt;
  &lt;li&gt;Added test file that makes an object of Basic test passes&lt;/li&gt;
  &lt;li&gt;Used symengine license in gem and updated Manifest&lt;/li&gt;
  &lt;li&gt;Removed rake and rake-compiler from dependencies&lt;/li&gt;
  &lt;li&gt;Removed unnecessary files as discussed LICENSE, Rakefile and extconf.rb&lt;/li&gt;
  &lt;li&gt;Added display messages in CMakeLists.txt for Ruby&lt;/li&gt;
  &lt;li&gt;Updated the docs&lt;/li&gt;
  &lt;li&gt;Added src/ruby/pkg to gitignore&lt;/li&gt;
  &lt;li&gt;Removed bin folder&lt;/li&gt;
  &lt;li&gt;Fix typo&lt;/li&gt;
  &lt;li&gt;Build ruby wrappers with CMake&lt;/li&gt;
  &lt;li&gt;Tried to use &lt;code&gt;g++&lt;/code&gt; compiler&lt;/li&gt;
  &lt;li&gt;Updated compile instructions in README&lt;/li&gt;
  &lt;li&gt;Added the option to config dirs&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>The Load Error</title>
   <link href="http://abinashmeher999.github.io/2015/06/12/The-Load-Error/"/>
   <updated>2015-06-12T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/06/12/The-Load-Error</id>
   <content type="html">&lt;p&gt;I hope you remember the &lt;code&gt;LoadError&lt;/code&gt; that I shared with you last week. The one which I was stuck for many days, and well frankly I couldn’t devote much time too, at the beginning of this week as there was the competition and the travel back home. It was only these one or two days at the end when I could search for the error.&lt;!--more--&gt;&lt;br /&gt;
For convenience, I am adding the gist again&lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/abinashmeher999/2544b4961f547bf286e7.js&quot;&gt; &lt;/script&gt;&lt;br /&gt;
I was very close to finding out the error. I was certain that the directory, or atleast the file was missing from the &lt;code&gt;$LOAD_PATH&lt;/code&gt;. Which becomes obvious, once you go through a few results after you have searched for the same error on the internet. But I had followed the tutorials from RubyGems.org on writing, file structure and naming of the extensions. So, there wasn’t any doubt that the extension might be building at a wrong location, that was not added to the &lt;code&gt;$LOAD_PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Even upon checking, the file &lt;code&gt;symengine.so&lt;/code&gt; was right there in &lt;code&gt;lib/symengine&lt;/code&gt; dir, after the extension was properly built. The only thing that I followed a little different from the tutorials was the &lt;code&gt;gemspec&lt;/code&gt; file. So, I narrowed it down to &lt;code&gt;gemspec&lt;/code&gt; file where the error might have been caused. Or some missing parameter that we need to set in order to include that to the &lt;code&gt;$LOAD_PATH&lt;/code&gt; upon installation of the gem.&lt;/p&gt;

&lt;p&gt;Then &lt;a href=&quot;https://github.com/isuruf&quot;&gt;Isuru&lt;/a&gt;, one of my fellow GSoC students from SymPy, came to the rescue and pointed out that I had failed to include the library file &lt;code&gt;symegine.so&lt;/code&gt; in the files list of the gem. What I was doing was&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;lib/**/*.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bin/*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;LICENSE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With &lt;code&gt;lib/**/*.rb&lt;/code&gt; I was clearly missing out the &lt;code&gt;lib/symegine/symegine.so&lt;/code&gt; file, which was the one &lt;code&gt;require &#39;symengine&#39;&lt;/code&gt; wasn’t able to load. Upon doing&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;lib/**/*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bin/*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;LICENSE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I could finally resolve the load error.&lt;/p&gt;

&lt;p&gt;Commits:&lt;br /&gt;
1. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/bcab97852b9b5350bb15eee6e3619291b7ff4aa0&quot;&gt;Load error fixed, added symengine.so to gem.files&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Week 3</title>
   <link href="http://abinashmeher999.github.io/2015/06/05/Week-3/"/>
   <updated>2015-06-05T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/06/05/Week-3</id>
   <content type="html">&lt;p&gt;Sorry Guys. I don’t have much to say with this blog post. I am at a competition called &lt;em&gt;Intelligent Ground Vehicle Competition&lt;/em&gt; and didn’t get any time to work on the project. I wish I had time to solve the error.&lt;!--more--&gt; Unresolved errors really bother me. Even now, at the very time I am writing this post, my team-mates are struggling with a really sneaky bug. Arghhh!!&lt;/p&gt;

&lt;p&gt;Soon I will be back to resume my project. And try to figure out more about the error.&lt;br /&gt;
This is the error&lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/abinashmeher999/2544b4961f547bf286e7.js&quot;&gt; &lt;/script&gt;
I will appreciate it if you can share any hint about fixing this error. Looking forward to the next week!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building the wrappers</title>
   <link href="http://abinashmeher999.github.io/2015/05/29/Building-the-wrappers/"/>
   <updated>2015-05-29T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/05/29/Building-the-wrappers</id>
   <content type="html">&lt;p&gt;This week was very engaging and a little hectic at the end for me. I had to rethink many things during the week, like these wrappers. I had to rewrite them, because of a logical error in the allocation of the pointers that pointed to the data. And spent a whole lot of time trying to understand a hack of passing a variable by reference in &lt;code&gt;c&lt;/code&gt; only to conclude that it can’t be used!&lt;!--more--&gt; Anyways, I learnt a new &lt;code&gt;c&lt;/code&gt; hack! You can refer to &lt;a href=&quot;http://stackoverflow.com/questions/30479106/possible-side-effects-of-doing-a-typedef-of-a-struct-to-an-array-of-one-element&quot;&gt;this question&lt;/a&gt; that I asked on stack overflow.&lt;/p&gt;

&lt;p&gt;So, the wrappers for Basic were written. But they didn’t compile because of a missing &lt;code&gt;-fPIC&lt;/code&gt; flag that evidently &lt;code&gt;cmake&lt;/code&gt; puts it on its own and &lt;code&gt;rake&lt;/code&gt; doesn’t. The flag, I guess, was required to enable building of shared libs. The error message was something like this&lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/abinashmeher999/3997cd256a91ff08edce.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;After hours and hours of googling and reading code on github, I figured out a way to add it. It needs to be added to the variable &lt;code&gt;$CFLAGS&lt;/code&gt; which is in &lt;code&gt;extconf.rb&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#File: extconf.rb&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$CFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; -Wall&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-Wall&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$CFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; -Werror&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-Werror&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$CFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; -fPIC&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-fpic&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And again there was another error&lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/abinashmeher999/a6964329f4b18948a61d.js&quot;&gt; &lt;/script&gt;
Which was basically because of the &lt;code&gt;static&lt;/code&gt; qualifier. Apparently it was local only to that file. Removing the static qualifier got rid of the errors. Thanks to &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondrej&lt;/a&gt;, who was there to help with any problem I faced during the whole week.&lt;/p&gt;

&lt;p&gt;And finally… the extension built.&lt;/p&gt;

&lt;p&gt;I built the gem and installed it. But I am not yet able to load the extension. There might be some issue with the library path. I will fix that and update it. That will be fixed hopefully in a day or two. And then I will build on the minimal test that I wrote.&lt;/p&gt;

&lt;p&gt;The next week I will be a little busy with the competition but I can at least fix the errors in loading the extension properly in &lt;code&gt;irb&lt;/code&gt; and add the remaning methods. The plan now for the next coding week is to add wrappers for the &lt;code&gt;Symbol&lt;/code&gt; class and &lt;code&gt;Integer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Commits:&lt;br /&gt;
1. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/9d9e9b5370aeaf2a3b2c933433ac5c8eddb8c849&quot;&gt;Rewrote Ruby C wrappers w/o typedefed array basic&lt;/a&gt;&lt;br /&gt;
2. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/fb73879ef488f7e536b03b2d526f90052a5652ca&quot;&gt;Added bare test file for &lt;code&gt;Basic&lt;/code&gt; class&lt;/a&gt;&lt;br /&gt;
3. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/4ccf13f496f8f8c0845d8791dcaf3194d762158d&quot;&gt;Fixed an error in &lt;code&gt;Gemfile&lt;/code&gt; and added &lt;code&gt;README&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
4. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/0f41bd84d139f885eb260957cccdc338f79929bf&quot;&gt;Added WITH_RUBY flags to CMakeLists.txt&lt;/a&gt;&lt;br /&gt;
5. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/2c1eb36f86291c30044f635f6c0c068cb4d0864f&quot;&gt;Added flag &lt;code&gt;-fPIC&lt;/code&gt;. Still doesn’t compile&lt;/a&gt;&lt;br /&gt;
6. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/fb6861ba3795c2c2d0d9a57954da107257e93b1a&quot;&gt;Changes to build the ruby extensions&lt;/a&gt;&lt;br /&gt;
7. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/d6eabe7e258e5260ea1e3b48853c57e851e13800&quot;&gt;Change in &lt;code&gt;require_path&lt;/code&gt; of gemspec&lt;/a&gt;&lt;br /&gt;
8. &lt;a href=&quot;https://github.com/abinashmeher999/symengine/commit/6792df9a9cbc3bfd82640fb2580fc8046888e2a1&quot;&gt;Removed the &lt;code&gt;static&lt;/code&gt; qualifier in wrappers&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing wrappers for Basic class</title>
   <link href="http://abinashmeher999.github.io/2015/05/22/Writing-wrappers-for-Basic-class/"/>
   <updated>2015-05-22T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/05/22/Writing-wrappers-for-Basic-class</id>
   <content type="html">&lt;p&gt;So, it’s been already a week! The coding period (for me) has started. I am starting early to make up for my absence for a few days.&lt;/p&gt;

&lt;p&gt;I had already setup a minimal gem and automated building of extensions. I read the docs&lt;!--more--&gt; for c wrappers that have already been written in &lt;a href=&quot;https://github.com/sympy/symengine/blob/master/src/cwrapper.h&quot;&gt;&lt;code&gt;cwrapper.h&lt;/code&gt;&lt;/a&gt;. It mostly contains the c wrappers for &lt;code&gt;Basic&lt;/code&gt; class and a few of &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; classes. At one time I was confident that I could write all the wrappers for &lt;code&gt;Basic&lt;/code&gt; class at one go. How hard could it be? The thing I learnt is you can never be sure of anything, unless you implement it. I had to keep a copy of the documentation for writing extensions &lt;a href=&quot;https://github.com/ruby/ruby/blob/trunk/doc/extension.rdoc&quot;&gt;&lt;code&gt;README.EXT&lt;/code&gt;&lt;/a&gt; open at all times, double checking everything. Still, I got confused.&lt;/p&gt;

&lt;p&gt;Ondrej has advised me to make only a single function work first. That would be a better way, because once we figure out what to do. It’s pretty much the same for the others too. I hope it does. Then I can iteratively add other methods one by one.&lt;/p&gt;

&lt;p&gt;I pushed the commits to the PR &lt;a href=&quot;https://github.com/sympy/symengine/pull/414&quot;&gt;‘[WIP] Ruby wrappers initial file structure and Basic class #414’&lt;/a&gt;. The plan for the next week is to atleast finish this, write the tests in RSpec, and document them. Also if possible, start working on the other classes.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Google Summer of Code 2015</title>
   <link href="http://abinashmeher999.github.io/2015/05/06/Google-Summer-of-Code-2015/"/>
   <updated>2015-05-06T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/05/06/Google-Summer-of-Code-2015</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/gsoc/gsoc-2015.png&quot; alt=&quot;GSoC-2015&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hi there! Yeah, you guessed it. I got selected into Google Summer of Code 2015! I am very excited for the summers. The results have been out and My project &lt;strong&gt;Ruby Bindings for SymEngine C++ symbolic manipulation library&lt;/strong&gt; has been selected.&lt;!--more--&gt; I was selected by The Ruby Science Foundation but luckily I get to work with both SciRuby and SymPy! Isn’t that exciting?&lt;/p&gt;

&lt;p&gt;My mentor is Mr. Ondřej Čertík himslef, who is the founder of SymPy and I am lucky to be mentored by him. I would like to thank him and the Ruby Science Foundation and all the folks there to give me such an opportunity. John Woods and Carlos Agarie helped me a lot during the application period. I would also like to thank Harsh Gupta and Shivam Vats for introducing me to the community.&lt;/p&gt;

&lt;h2 id=&quot;the-project&quot;&gt;The Project&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Ruby Bindings for SymEngine a symbolic manipulation library in C++&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
My project is to write the Ruby extensions for the C++ SymEngine library that provides functions for symbolic manipulation. This would also involve making the interface more rubyish than C++.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/abinashmeher999/sciruby/wiki/GSoC-2015-Abinash-Meher:-Ruby-bindings-for-CSymPy&quot;&gt;project&lt;/a&gt; will set up a strong foundation for any symbolic manipulation library or “SymRuby” for that matter, to be built for Ruby in the future. SymEngine is fast and is very apt to start the work with. I have also come across GlucSym, which is an unpublished Ruby-to-GiNaC bridge from 2008.&lt;/p&gt;

&lt;p&gt;But this interface(my project) might be the impulse the Ruby community needed to have a fully functional symbolic manipulation library. After all Ruby is a Very High Level Language! It will soon be needing such libraries. For me, I would be glad if someone uses the library for her/his project!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Special semantics for arrow`->` operator and dot`.` operator in C++</title>
   <link href="http://abinashmeher999.github.io/2015/04/20/special-semantics-for-arrow-and-dot-operator-in-cpp/"/>
   <updated>2015-04-20T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/04/20/special-semantics-for-arrow-and-dot-operator-in-cpp</id>
   <content type="html">&lt;p&gt;Ever tried to overload &lt;code&gt;operator-&amp;gt;&lt;/code&gt;? If you haven’t, let me tell you this doesn’t work like other overloaded operators.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;For example let us take an operator like &lt;code&gt;operator*&lt;/code&gt;. What do you expect this to return? Lets say we have a pointer to &lt;code&gt;class A&lt;/code&gt;, &lt;code&gt;ptr_a&lt;/code&gt;. The &lt;code&gt;operator*&lt;/code&gt; is already overloaded in &lt;code&gt;class A&lt;/code&gt;. What would &lt;code&gt;(*ptr_a).foo();&lt;/code&gt; return?&lt;/p&gt;

&lt;p&gt;By simple logic, &lt;code&gt;*ptr_a&lt;/code&gt; will return the reference to the object &lt;code&gt;ptr_a&lt;/code&gt; points to(say &lt;code&gt;obj_a&lt;/code&gt;). And as expected the statement will execute as &lt;code&gt;(obj_a).foo()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, this logic doesn’t apply to the &lt;code&gt;operator-&amp;gt;()&lt;/code&gt;. As quoted from stack overflow,&lt;/p&gt;

&lt;blockquote&gt;
The &lt;code&gt;operator-&amp;gt;&lt;/code&gt; has special semantics in the language in that, when overloaded, it reapplies itself to the result. While the rest of the operators are applied only once, &lt;code&gt;operator-&amp;gt;&lt;/code&gt; will be applied by the compiler as many times as needed to get to a raw pointer and once more to access the memory referred by that pointer.

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

In the previous example, in the expression &lt;code&gt;d-&amp;gt;foo()&lt;/code&gt; the compiler will take the object &lt;code&gt;d&lt;/code&gt; and apply &lt;code&gt;operator-&amp;gt;&lt;/code&gt; to it, which yields an object of type &lt;code&gt;C&lt;/code&gt;, it will then reapply the operator to get an instance of &lt;code&gt;B&lt;/code&gt;, reapply and get to &lt;code&gt;A*&lt;/code&gt;, after which it will dereference the object and get to the pointed data.

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// expands to:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// (*d.operator-&amp;gt;().operator-&amp;gt;().operator-&amp;gt;()).foo();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   D            C            B           A*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/blockquote&gt;

&lt;p&gt;And guess what? You can’t overload operator.(). I would like to quote Bjarne Stroustrup here from &lt;a href=&quot;http://www.google.com/search?q=The+Design+and+Evolution+of+C%2B%2B&quot;&gt;The Design and Evolution of C++&lt;/a&gt;, page 242, section 11.5.2 Smart References.&lt;/p&gt;
&lt;blockquote&gt;&lt;em&gt;
&lt;p&gt;When I decided to allow overloading of operator -&amp;gt;, I naturally considered whether operator . could be similarly overloaded.&lt;/p&gt;

&lt;p&gt;At the time, I considered the following arguments conclusive: If obj is a class object then obj.m has a meaning for every member m of that object’s class. We try not to make the language mutable by redefining built-in operations (though that rule is violated for = out of dire need, and for unary &amp;amp;).&lt;/p&gt;

&lt;p&gt;If we allowed overloading of . for a class X, we would be unable to access members of X by normal means; we would have to use a pointer and -&amp;gt;, but -&amp;gt; and &amp;amp; might also have been re-defined. I wanted an extensible language, not a mutable one.&lt;/p&gt;

&lt;p&gt;These arguments are weighty, but not conclusive. In particular, in 1990 Jim Adcock proposed to allow overloading of operator . exactly the way operator -&amp;gt; is.&lt;/p&gt;
&lt;/em&gt;&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Docker! Looks cool,</title>
   <link href="http://abinashmeher999.github.io/2015/02/01/docker/"/>
   <updated>2015-02-01T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2015/02/01/docker</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://blog.docker.com/wp-content/uploads/2013/08/KuDr42X_ITXghJhSInDZekNEF0jLt3NeVxtRye3tqco.png&quot; alt=&quot;Docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I came across this term ‘docker’ while going through the project ‘Shogun-cloud’ and decided to google about it and learn what this does. Turns out it has made building, shipping and running distributed applications hassle free to a great extent.&lt;!--more--&gt; It is promising since it allows isolation of applications without the need of a different VM for each application. It is much more light-weight than a VM (anyone who has worked with a VM knows how heavy a VM can be).  The analogy given by its founder, Solomon Hykes, is very apt. He explains it as a shipping container as used by shipping companies, which standardises the shipping across each transportation vehicle regardless of what’s inside. Many companies like eBay have already changed to docker.&lt;/p&gt;

&lt;p&gt;I would highly recommend going through this short &lt;a href=&quot;https://www.docker.com/whatisdocker/&quot;&gt;introductory video&lt;/a&gt;. It doesn’t involve a lot of technical terms but gives a fairly good idea about docker.&lt;/p&gt;

&lt;p&gt;Will be posting more as I learn more about it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>An Easy Linear Time Longest Palindromic Substring finding Algorithm</title>
   <link href="http://abinashmeher999.github.io/2014/12/06/linear-time-longest-palindromic-substring/"/>
   <updated>2014-12-06T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2014/12/06/linear-time-longest-palindromic-substring</id>
   <content type="html">&lt;p&gt;I would like to discuss a simple and easy to understand algorithm for finding longest palindromic substring in linear time. I stumbled upon this during the Algorithms Lab Test. This is very similar to other algorithms but yet different.&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * File:   main.cpp&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Author: abinashmeher999&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Created on 16 November, 2014, 2:13 PM&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cmath&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;new&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*This algorithm uses just O(n) extra space only&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  that too only one more integer array of length n.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  With this algorithm we need to traverse the array only twice,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  if we exclude the one needed to initialize all to 1.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  So both time and space complexity wise, this seems good.*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;longestpalsubstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//there are no nested 2 &amp;#39;for&amp;#39; loops in this function&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//(except in printing the max substring but that too can be done&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//in O(n))&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//initializes the array&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//print the given string&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;S = &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//calculates the length of same character substring after the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//alphabet including itself&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//like for a,b,a, b,b,b, a, b,b,b, a,b,a&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//         1,1,1, 3,2,1, 1, 3,2,1, 1,1,1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//which is equal to 1 initially&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//prints Y&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Y = &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//finds the maximum palindrome length that&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//starts with the character at index k&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//traverses the array from the end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//checks if the index to be accessed is within n-1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//checks if, preceeding char == char at index(k+Y[k])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//if yes increases Y[k-1] by 2&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//there are exceptions, but it doesn&amp;#39;t&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//compromise with the final answer&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//         0  1 2 3 4 5 6 7 8 9 10&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//like S = a ,c,c,c,a,c,a,c,c,c,a&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//     Y = 11,9,7,5,3,1,5,3,1,1,1&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//in this case for c in middle (index 5) it is 1&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//(when Y by common sense should contain 3)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//but we still get the correct answer, so we cant say that&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//for all cases Y contains the length of the largest&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//palindrome starting from that index&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//prints Y&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;After finding longest palindromic substring&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Y = &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//finds maximum in Y&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//for printing purposes only&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Part II: Length = &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;. Substrings: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Enter the string&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longestpalsubstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>The Laws yet to be known</title>
   <link href="http://abinashmeher999.github.io/2014/12/05/laws-yet-to-be-known/"/>
   <updated>2014-12-05T00:00:00+05:30</updated>
   <id>http://abinashmeher999.github.iohttp://abinashmeher999.github.io/2014/12/05/laws-yet-to-be-known</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/laws-yet-to-be-known.jpeg&quot; alt=&quot;Mysterious-Universe&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have continuously been in search for the answer to questions that govern us and our lives and even the whole universe. But can we know the answers that have been forbidden to us, by the same laws that govern us?&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Like for example :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What if there are some particles that do not exist in the part of the universe we know about?&lt;/li&gt;
  &lt;li&gt;What if there are more general laws that operate in the higher dimensions and we don’t know of them just because of our incapability to navigate in those dimensions?&lt;/li&gt;
  &lt;li&gt;What if we are a giant experimental culture of &lt;em&gt;Homo Sapiens&lt;/em&gt; where the universe is a giant petri dish for the beings of higher dimensions?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wonder if the bacteria think of this too. If any of these is true, do the higher beings know we haven’t ruled out the possibility of their existence?&lt;/p&gt;
</content>
 </entry>
 

</feed>
